
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxAnalyzer;

import java_cup.runtime.*;
import lexicalAnalyzer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ToyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ToyParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ToyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ToyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ToyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\032" +
    "\004\000\002\032\002\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\005\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\007" +
    "\010\000\002\007\010\000\002\007\010\000\002\010\004" +
    "\000\002\010\002\000\002\033\005\000\002\033\002\000" +
    "\002\011\014\000\002\011\013\000\002\011\011\000\002" +
    "\011\010\000\002\011\012\000\002\011\011\000\002\011" +
    "\007\000\002\011\006\000\002\036\004\000\002\036\003" +
    "\000\002\034\005\000\002\034\002\000\002\012\004\000" +
    "\002\012\003\000\002\013\007\000\002\013\006\000\002" +
    "\037\004\000\002\037\003\000\002\014\010\000\002\014" +
    "\010\000\002\015\006\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\040\005\000\002\040\004\000" +
    "\002\041\004\000\002\041\003\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\011\000\002\017\007\000" +
    "\002\020\007\000\002\021\013\000\002\021\012\000\002" +
    "\021\012\000\002\021\011\000\002\022\004\000\002\023" +
    "\005\000\002\023\004\000\002\024\010\000\002\035\005" +
    "\000\002\035\002\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\025\005\000\002\025" +
    "\006\000\002\025\010\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\006\000" +
    "\002\027\010\000\002\030\004\000\002\030\002\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\042\006\000\002\042\006" +
    "\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\022\006\005\007\022\010\012\016\014\024" +
    "\011\026\007\032\004\064\013\001\002\000\010\056\ufff7" +
    "\057\ufff7\064\ufff7\001\002\000\010\056\ufff5\057\ufff5\064" +
    "\ufff5\001\002\000\004\053\371\001\002\000\004\064\364" +
    "\001\002\000\004\002\363\001\002\000\010\056\ufff4\057" +
    "\ufff4\064\ufff4\001\002\000\010\056\ufff6\057\ufff6\064\ufff6" +
    "\001\002\000\004\064\356\001\002\000\004\064\333\001" +
    "\002\000\006\057\070\064\067\001\002\000\024\002\ufffe" +
    "\006\005\007\022\010\012\016\014\024\011\026\007\032" +
    "\004\064\013\001\002\000\024\002\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\016\ufffc\024\ufffc\026\ufffc\032\ufffc\064\ufffc\001" +
    "\002\000\024\002\ufffb\006\ufffb\007\ufffb\010\ufffb\016\ufffb" +
    "\024\ufffb\026\ufffb\032\ufffb\064\ufffb\001\002\000\024\002" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\016\ufffa\024\ufffa\026\ufffa" +
    "\032\ufffa\064\ufffa\001\002\000\004\064\023\001\002\000" +
    "\010\012\024\015\026\061\025\001\002\000\004\064\050" +
    "\001\002\000\020\006\005\010\012\024\011\026\007\032" +
    "\004\062\045\064\013\001\002\000\004\064\027\001\002" +
    "\000\006\052\030\061\uffe0\001\002\000\004\064\043\001" +
    "\002\000\004\061\032\001\002\000\020\006\005\010\012" +
    "\024\011\026\007\032\004\062\037\064\013\001\002\000" +
    "\004\053\042\001\002\000\020\006\005\010\012\024\011" +
    "\026\007\032\004\062\uffe2\064\013\001\002\000\020\006" +
    "\uffde\010\uffde\024\uffde\026\uffde\032\uffde\062\uffde\064\uffde" +
    "\001\002\000\004\062\040\001\002\000\024\002\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\016\uffe6\024\uffe6\026\uffe6\032\uffe6" +
    "\064\uffe6\001\002\000\024\002\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\016\uffe7\024\uffe7\026\uffe7\032\uffe7\064\uffe7\001\002" +
    "\000\004\062\uffe3\001\002\000\020\006\uffdf\010\uffdf\024" +
    "\uffdf\026\uffdf\032\uffdf\062\uffdf\064\uffdf\001\002\000\006" +
    "\052\030\061\uffe0\001\002\000\004\061\uffe1\001\002\000" +
    "\024\002\uffe4\006\uffe4\007\uffe4\010\uffe4\016\uffe4\024\uffe4" +
    "\026\uffe4\032\uffe4\064\uffe4\001\002\000\004\062\047\001" +
    "\002\000\024\002\uffe5\006\uffe5\007\uffe5\010\uffe5\016\uffe5" +
    "\024\uffe5\026\uffe5\032\uffe5\064\uffe5\001\002\000\006\015" +
    "\052\061\051\001\002\000\020\006\005\010\012\024\011" +
    "\026\007\032\004\062\061\064\013\001\002\000\004\064" +
    "\053\001\002\000\006\052\030\061\uffe0\001\002\000\004" +
    "\061\055\001\002\000\020\006\005\010\012\024\011\026" +
    "\007\032\004\062\057\064\013\001\002\000\004\062\060" +
    "\001\002\000\024\002\uffea\006\uffea\007\uffea\010\uffea\016" +
    "\uffea\024\uffea\026\uffea\032\uffea\064\uffea\001\002\000\024" +
    "\002\uffeb\006\uffeb\007\uffeb\010\uffeb\016\uffeb\024\uffeb\026" +
    "\uffeb\032\uffeb\064\uffeb\001\002\000\024\002\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\016\uffe8\024\uffe8\026\uffe8\032\uffe8\064" +
    "\uffe8\001\002\000\004\062\063\001\002\000\024\002\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\016\uffe9\024\uffe9\026\uffe9\032" +
    "\uffe9\064\uffe9\001\002\000\004\002\001\001\002\000\024" +
    "\002\ufffe\006\005\007\022\010\012\016\014\024\011\026" +
    "\007\032\004\064\013\001\002\000\004\002\uffff\001\002" +
    "\000\006\053\ufff9\055\072\001\002\000\004\060\071\001" +
    "\002\000\010\056\ufff3\057\ufff3\064\ufff3\001\002\000\016" +
    "\006\005\010\012\024\011\032\004\056\uffee\064\073\001" +
    "\002\000\004\064\257\001\002\000\006\052\327\056\uffec" +
    "\001\002\000\006\057\070\064\326\001\002\000\004\056" +
    "\077\001\002\000\004\061\100\001\002\000\066\006\005" +
    "\010\012\013\105\014\117\017\126\020\115\021\104\022" +
    "\134\023\123\024\011\025\120\027\141\030\133\031\130" +
    "\032\004\034\106\050\112\053\111\055\110\061\100\062" +
    "\135\063\122\064\121\065\125\066\114\067\142\001\002" +
    "\000\026\002\ufff2\006\ufff2\007\ufff2\010\ufff2\016\ufff2\024" +
    "\ufff2\026\ufff2\032\ufff2\062\ufff2\064\ufff2\001\002\000\044" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\052\uffb6\053\uffb6\056\uffb6\060\uffb6\001\002\000\060\011" +
    "\uffcc\013\uffcc\014\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc\034\uffcc\050" +
    "\uffcc\053\uffcc\055\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\001\002\000\004\055\321\001" +
    "\002\000\004\055\277\001\002\000\034\017\126\020\115" +
    "\022\134\025\120\031\130\034\106\050\112\055\110\063" +
    "\122\064\147\065\125\066\114\067\142\001\002\000\060" +
    "\011\uffcd\013\uffcd\014\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd" +
    "\050\uffcd\053\uffcd\055\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\001\002\000\034\017\126" +
    "\020\115\022\134\025\120\031\130\034\106\050\112\055" +
    "\110\063\122\064\147\065\125\066\114\067\142\001\002" +
    "\000\060\011\uffce\013\uffce\014\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\025\uffce\027\uffce\030\uffce\031\uffce" +
    "\034\uffce\050\uffce\053\uffce\055\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\067\uffce\001\002\000\034" +
    "\017\126\020\115\022\134\025\120\031\130\034\106\050" +
    "\112\055\110\063\122\064\147\065\125\066\114\067\142" +
    "\001\002\000\060\011\uffcb\013\uffcb\014\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\034\uffcb\050\uffcb\053\uffcb\055\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002" +
    "\000\044\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\052\uff99\053\uff99\056\uff99\060\uff99\001\002\000" +
    "\004\055\266\001\002\000\060\011\uffc7\013\uffc7\014\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\034\uffc7\050\uffc7\053\uffc7\055\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\001\002\000\004\055\260\001\002\000\044\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\052\uffb7" +
    "\053\uffb7\056\uffb7\060\uffb7\001\002\000\050\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\051\uffa0\053" +
    "\uffa1\054\151\055\152\057\uffa0\064\257\001\002\000\044" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a" +
    "\052\uff9a\053\uff9a\056\uff9a\060\uff9a\001\002\000\036\017" +
    "\126\020\115\022\134\025\120\031\130\034\106\050\112" +
    "\053\254\055\110\063\122\064\147\065\125\066\114\067" +
    "\142\001\002\000\010\051\247\054\246\057\245\001\002" +
    "\000\044\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\052\uff98\053\uff98\056\uff98\060\uff98\001\002\000" +
    "\004\055\242\001\002\000\066\006\005\010\012\013\105" +
    "\014\117\017\126\020\115\021\104\022\134\023\123\024" +
    "\011\025\120\027\141\030\133\031\130\032\004\034\106" +
    "\050\112\053\111\055\110\061\100\062\235\063\122\064" +
    "\121\065\125\066\114\067\142\001\002\000\044\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\052\uff96" +
    "\053\uff96\056\uff96\060\uff96\001\002\000\052\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\051\uff9f\052" +
    "\uffa2\053\uffa2\054\uff9f\056\uffa2\057\232\060\uffa2\001\002" +
    "\000\044\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\052\uffb8\053\uffb8\056\uffb8\060\uffb8\001\002\000" +
    "\004\053\231\001\002\000\004\055\227\001\002\000\100" +
    "\002\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\034\uffd4\050\uffd4\053\uffd4\055\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\001\002\000" +
    "\060\011\uffca\013\uffca\014\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\025\uffca\027\uffca\030\uffca\031\uffca\034" +
    "\uffca\050\uffca\053\uffca\055\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\001\002\000\004\062" +
    "\226\001\002\000\004\053\225\001\002\000\004\055\221" +
    "\001\002\000\044\033\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\052\uff97\053\uff97\056\uff97\060\uff97\001" +
    "\002\000\060\011\uffc9\013\uffc9\014\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\034\uffc9\050\uffc9\053\uffc9\055\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002\000" +
    "\036\033\166\034\157\035\174\036\171\037\161\040\167" +
    "\041\164\042\163\043\172\044\165\045\160\046\156\047" +
    "\173\053\220\001\002\000\060\011\uffc8\013\uffc8\014\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\034\uffc8\050\uffc8\053\uffc8\055\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\001\002\000\056\013\105\014\117\017\126\020\115" +
    "\021\104\022\134\023\123\025\120\027\141\030\133\031" +
    "\130\034\106\050\112\053\111\055\110\061\100\062\uffd0" +
    "\063\122\064\147\065\125\066\114\067\142\001\002\000" +
    "\054\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\051\uffa0\052\uffa1\053\uffa1\054\151\055\152\056\uffa1" +
    "\057\uffa0\060\uffa1\001\002\000\004\062\uffd1\001\002\000" +
    "\004\064\214\001\002\000\036\017\126\020\115\022\134" +
    "\025\120\031\130\034\106\050\112\055\110\056\uff9b\063" +
    "\122\064\147\065\125\066\114\067\142\001\002\000\040" +
    "\033\166\034\157\035\174\036\171\037\161\040\167\041" +
    "\164\042\163\043\172\044\165\045\160\046\156\047\173" +
    "\052\170\056\uffba\001\002\000\004\056\155\001\002\000" +
    "\044\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\052\uff9e\053\uff9e\056\uff9e\060\uff9e\001\002\000\034" +
    "\017\126\020\115\022\134\025\120\031\130\034\106\050" +
    "\112\055\110\063\122\064\147\065\125\066\114\067\142" +
    "\001\002\000\034\017\126\020\115\022\134\025\120\031" +
    "\130\034\106\050\112\055\110\063\122\064\147\065\125" +
    "\066\114\067\142\001\002\000\034\017\126\020\115\022" +
    "\134\025\120\031\130\034\106\050\112\055\110\063\122" +
    "\064\147\065\125\066\114\067\142\001\002\000\034\017" +
    "\126\020\115\022\134\025\120\031\130\034\106\050\112" +
    "\055\110\063\122\064\147\065\125\066\114\067\142\001" +
    "\002\000\004\056\uff9c\001\002\000\034\017\126\020\115" +
    "\022\134\025\120\031\130\034\106\050\112\055\110\063" +
    "\122\064\147\065\125\066\114\067\142\001\002\000\034" +
    "\017\126\020\115\022\134\025\120\031\130\034\106\050" +
    "\112\055\110\063\122\064\147\065\125\066\114\067\142" +
    "\001\002\000\034\017\126\020\115\022\134\025\120\031" +
    "\130\034\106\050\112\055\110\063\122\064\147\065\125" +
    "\066\114\067\142\001\002\000\034\017\126\020\115\022" +
    "\134\025\120\031\130\034\106\050\112\055\110\063\122" +
    "\064\147\065\125\066\114\067\142\001\002\000\034\017" +
    "\126\020\115\022\134\025\120\031\130\034\106\050\112" +
    "\055\110\063\122\064\147\065\125\066\114\067\142\001" +
    "\002\000\034\017\126\020\115\022\134\025\120\031\130" +
    "\034\106\050\112\055\110\063\122\064\147\065\125\066" +
    "\114\067\142\001\002\000\034\017\126\020\115\022\134" +
    "\025\120\031\130\034\106\050\112\055\110\063\122\064" +
    "\147\065\125\066\114\067\142\001\002\000\034\017\126" +
    "\020\115\022\134\025\120\031\130\034\106\050\112\055" +
    "\110\063\122\064\147\065\125\066\114\067\142\001\002" +
    "\000\034\017\126\020\115\022\134\025\120\031\130\034" +
    "\106\050\112\055\110\063\122\064\147\065\125\066\114" +
    "\067\142\001\002\000\034\017\126\020\115\022\134\025" +
    "\120\031\130\034\106\050\112\055\110\063\122\064\147" +
    "\065\125\066\114\067\142\001\002\000\044\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\052\uffb2\053" +
    "\uffb2\056\uffb2\060\uffb2\001\002\000\044\033\166\034\157" +
    "\035\174\036\171\037\161\040\167\041\164\042\163\043" +
    "\172\044\165\045\160\046\156\047\uffa7\052\uffa7\053\uffa7" +
    "\056\uffa7\060\uffa7\001\002\000\044\033\166\034\157\035" +
    "\174\036\171\037\161\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\052\uffab\053\uffab\056" +
    "\uffab\060\uffab\001\002\000\044\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\052\uffb1\053\uffb1\056\uffb1" +
    "\060\uffb1\001\002\000\040\033\166\034\157\035\174\036" +
    "\171\037\161\040\167\041\164\042\163\043\172\044\165" +
    "\045\160\046\156\047\173\052\170\056\uffba\001\002\000" +
    "\004\056\uffbb\001\002\000\044\033\166\034\157\035\174" +
    "\036\171\037\161\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\052\uffae\053\uffae\056\uffae" +
    "\060\uffae\001\002\000\044\033\uffb4\034\uffb4\035\174\036" +
    "\171\037\161\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\052\uffb4\053\uffb4\056\uffb4\060" +
    "\uffb4\001\002\000\044\033\166\034\157\035\174\036\171" +
    "\037\161\040\167\041\164\042\163\043\172\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\052\uffaa\053\uffaa\056\uffaa\060\uffaa" +
    "\001\002\000\044\033\166\034\157\035\174\036\171\037" +
    "\161\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\052\uffac\053\uffac\056\uffac\060\uffac\001" +
    "\002\000\044\033\166\034\157\035\174\036\171\037\161" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\052\uffad\053\uffad\056\uffad\060\uffad\001\002" +
    "\000\044\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\052\uffb0\053\uffb0\056\uffb0\060\uffb0\001\002\000" +
    "\044\033\166\034\157\035\174\036\171\037\161\040\167" +
    "\041\164\042\163\043\172\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\052\uffa9\053\uffa9\056\uffa9\060\uffa9\001\002\000\044" +
    "\033\uffb3\034\uffb3\035\174\036\171\037\161\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\052\uffb3\053\uffb3\056\uffb3\060\uffb3\001\002\000\044\033" +
    "\166\034\157\035\174\036\171\037\161\040\167\041\164" +
    "\042\163\043\172\044\165\045\160\046\uffa8\047\uffa8\052" +
    "\uffa8\053\uffa8\056\uffa8\060\uffa8\001\002\000\004\055\215" +
    "\001\002\000\036\017\126\020\115\022\134\025\120\031" +
    "\130\034\106\050\112\055\110\056\uff9b\063\122\064\147" +
    "\065\125\066\114\067\142\001\002\000\004\056\217\001" +
    "\002\000\044\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\052\uff9d\053\uff9d\056\uff9d\060\uff9d\001\002" +
    "\000\060\011\uffcf\013\uffcf\014\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\034\uffcf\050\uffcf\053\uffcf\055\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\001\002\000\034" +
    "\017\126\020\115\022\134\025\120\031\130\034\106\050" +
    "\112\055\110\063\122\064\147\065\125\066\114\067\142" +
    "\001\002\000\036\033\166\034\157\035\174\036\171\037" +
    "\161\040\167\041\164\042\163\043\172\044\165\045\160" +
    "\046\156\047\173\056\223\001\002\000\054\013\105\014" +
    "\117\017\126\020\115\021\104\022\134\023\123\025\120" +
    "\027\141\030\133\031\130\034\106\050\112\053\111\055" +
    "\110\061\100\063\122\064\147\065\125\066\114\067\142" +
    "\001\002\000\060\011\uffc4\013\uffc4\014\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\034\uffc4\050\uffc4\053\uffc4\055\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\001\002" +
    "\000\066\006\uffd2\010\uffd2\013\uffd2\014\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\034\uffd2\050\uffd2\053\uffd2\055" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\001\002\000\100\002\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\050\uffd6\053\uffd6" +
    "\055\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\001\002\000\004\056\230\001\002\000\044" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\052\uffa5\053\uffa5\056\uffa5\060\uffa5\001\002\000\060\011" +
    "\uffbf\013\uffbf\014\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\034\uffbf\050" +
    "\uffbf\053\uffbf\055\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\001\002\000\034\017\126\020" +
    "\115\022\134\025\120\031\130\034\106\050\112\055\110" +
    "\063\122\064\147\065\125\066\114\067\142\001\002\000" +
    "\036\033\166\034\157\035\174\036\171\037\161\040\167" +
    "\041\164\042\163\043\172\044\165\045\160\046\156\047" +
    "\173\060\234\001\002\000\052\033\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\047\uff94\051\uff94\052\uff94\053\uff94" +
    "\054\uff94\056\uff94\057\uff94\060\uff94\001\002\000\100\002" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\050\uffd5\053\uffd5\055\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\001\002\000\004" +
    "\062\241\001\002\000\004\053\240\001\002\000\066\006" +
    "\uffd3\010\uffd3\013\uffd3\014\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\034\uffd3\050\uffd3\053\uffd3\055\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001" +
    "\002\000\100\002\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\034\uffd7\050\uffd7\053\uffd7\055\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\001\002\000\004\064\243\001\002\000\004\056\244\001" +
    "\002\000\044\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\052\uffa4\053\uffa4\056\uffa4\060\uffa4\001\002" +
    "\000\034\017\126\020\115\022\134\025\120\031\130\034" +
    "\106\050\112\055\110\063\122\064\147\065\125\066\114" +
    "\067\142\001\002\000\004\064\251\001\002\000\034\017" +
    "\126\020\115\022\134\025\120\031\130\034\106\050\112" +
    "\055\110\063\122\064\147\065\125\066\114\067\142\001" +
    "\002\000\044\033\166\034\157\035\174\036\171\037\161" +
    "\040\167\041\164\042\163\043\172\044\165\045\160\046" +
    "\156\047\173\052\uffb9\053\uffb9\056\uffb9\060\uffb9\001\002" +
    "\000\052\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\051\uff93\052\uff93\053\uff93\054\uff93\056\uff93\057" +
    "\uff93\060\uff93\001\002\000\036\033\166\034\157\035\174" +
    "\036\171\037\161\040\167\041\164\042\163\043\172\044" +
    "\165\045\160\046\156\047\173\060\253\001\002\000\052" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\056\uff95\057\uff95\060" +
    "\uff95\001\002\000\060\011\uffbd\013\uffbd\014\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\034\uffbd\050\uffbd\053\uffbd\055\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\001" +
    "\002\000\036\033\166\034\157\035\174\036\171\037\161" +
    "\040\167\041\164\042\163\043\172\044\165\045\160\046" +
    "\156\047\173\053\256\001\002\000\060\011\uffbe\013\uffbe" +
    "\014\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\025" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\034\uffbe\050\uffbe\053\uffbe" +
    "\055\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\067\uffbe\001\002\000\010\052\ufff8\053\ufff8\056\ufff8" +
    "\001\002\000\034\017\126\020\115\022\134\025\120\031" +
    "\130\034\106\050\112\055\110\063\122\064\147\065\125" +
    "\066\114\067\142\001\002\000\036\033\166\034\157\035" +
    "\174\036\171\037\161\040\167\041\164\042\163\043\172" +
    "\044\165\045\160\046\156\047\173\056\262\001\002\000" +
    "\054\013\105\014\117\017\126\020\115\021\104\022\134" +
    "\023\123\025\120\027\141\030\133\031\130\034\106\050" +
    "\112\053\111\055\110\061\100\063\122\064\147\065\125" +
    "\066\114\067\142\001\002\000\060\011\264\013\uffc5\014" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\034\uffc5\050\uffc5\053\uffc5\055" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\067\uffc5\001\002\000\054\013\105\014\117\017\126\020" +
    "\115\021\104\022\134\023\123\025\120\027\141\030\133" +
    "\031\130\034\106\050\112\053\111\055\110\061\100\063" +
    "\122\064\147\065\125\066\114\067\142\001\002\000\060" +
    "\011\uffc6\013\uffc6\014\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\025\uffc6\027\uffc6\030\uffc6\031\uffc6\034\uffc6" +
    "\050\uffc6\053\uffc6\055\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000\004\063\267" +
    "\001\002\000\004\052\270\001\002\000\012\006\005\010" +
    "\012\024\011\032\004\001\002\000\006\056\272\057\070" +
    "\001\002\000\044\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\052\uffa3\053\uffa3\056\uffa3\060\uffa3\001" +
    "\002\000\044\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\052\uffa6\053\uffa6\056\uffa6\060\uffa6\001\002" +
    "\000\036\033\166\034\157\035\174\036\171\037\161\040" +
    "\167\041\164\042\163\043\172\044\165\045\160\046\156" +
    "\047\173\056\275\001\002\000\044\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\052\uffb5\053\uffb5\056" +
    "\uffb5\060\uffb5\001\002\000\044\033\uffaf\034\uffaf\035\174" +
    "\036\171\037\161\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\052\uffaf\053\uffaf\056\uffaf" +
    "\060\uffaf\001\002\000\036\017\126\020\115\022\134\025" +
    "\120\031\130\034\106\050\112\053\300\055\110\063\122" +
    "\064\147\065\125\066\114\067\142\001\002\000\034\017" +
    "\126\020\115\022\134\025\120\031\130\034\106\050\112" +
    "\055\110\063\122\064\147\065\125\066\114\067\142\001" +
    "\002\000\036\033\166\034\157\035\174\036\171\037\161" +
    "\040\167\041\164\042\163\043\172\044\165\045\160\046" +
    "\156\047\173\053\302\001\002\000\034\017\126\020\115" +
    "\022\134\025\120\031\130\034\106\050\112\055\110\063" +
    "\122\064\147\065\125\066\114\067\142\001\002\000\036" +
    "\033\166\034\157\035\174\036\171\037\161\040\167\041" +
    "\164\042\163\043\172\044\165\045\160\046\156\047\173" +
    "\053\304\001\002\000\036\017\126\020\115\022\134\025" +
    "\120\031\130\034\106\050\112\055\110\056\306\063\122" +
    "\064\147\065\125\066\114\067\142\001\002\000\036\033" +
    "\166\034\157\035\174\036\171\037\161\040\167\041\164" +
    "\042\163\043\172\044\165\045\160\046\156\047\173\056" +
    "\310\001\002\000\054\013\105\014\117\017\126\020\115" +
    "\021\104\022\134\023\123\025\120\027\141\030\133\031" +
    "\130\034\106\050\112\053\111\055\110\061\100\063\122" +
    "\064\147\065\125\066\114\067\142\001\002\000\060\011" +
    "\uffc2\013\uffc2\014\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\034\uffc2\050" +
    "\uffc2\053\uffc2\055\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\001\002\000\054\013\105\014" +
    "\117\017\126\020\115\021\104\022\134\023\123\025\120" +
    "\027\141\030\133\031\130\034\106\050\112\053\111\055" +
    "\110\061\100\063\122\064\147\065\125\066\114\067\142" +
    "\001\002\000\060\011\uffc3\013\uffc3\014\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\034\uffc3\050\uffc3\053\uffc3\055\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\001\002" +
    "\000\036\033\166\034\157\035\174\036\171\037\161\040" +
    "\167\041\164\042\163\043\172\044\165\045\160\046\156" +
    "\047\173\053\313\001\002\000\036\017\126\020\115\022" +
    "\134\025\120\031\130\034\106\050\112\055\110\056\315" +
    "\063\122\064\147\065\125\066\114\067\142\001\002\000" +
    "\036\033\166\034\157\035\174\036\171\037\161\040\167" +
    "\041\164\042\163\043\172\044\165\045\160\046\156\047" +
    "\173\056\317\001\002\000\054\013\105\014\117\017\126" +
    "\020\115\021\104\022\134\023\123\025\120\027\141\030" +
    "\133\031\130\034\106\050\112\053\111\055\110\061\100" +
    "\063\122\064\147\065\125\066\114\067\142\001\002\000" +
    "\060\011\uffc0\013\uffc0\014\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\034" +
    "\uffc0\050\uffc0\053\uffc0\055\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002\000\054\013" +
    "\105\014\117\017\126\020\115\021\104\022\134\023\123" +
    "\025\120\027\141\030\133\031\130\034\106\050\112\053" +
    "\111\055\110\061\100\063\122\064\147\065\125\066\114" +
    "\067\142\001\002\000\060\011\uffc1\013\uffc1\014\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\025\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\034\uffc1\050\uffc1\053\uffc1\055\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\001\002\000\034\017\126\020\115\022\134\025\120\031" +
    "\130\034\106\050\112\055\110\063\122\064\147\065\125" +
    "\066\114\067\142\001\002\000\040\033\166\034\157\035" +
    "\174\036\171\037\161\040\167\041\164\042\163\043\172" +
    "\044\165\045\160\046\156\047\173\052\170\056\uffba\001" +
    "\002\000\004\056\324\001\002\000\004\053\325\001\002" +
    "\000\060\011\uffbc\013\uffbc\014\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\034\uffbc\050\uffbc\053\uffbc\055\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002\000\010" +
    "\052\ufff9\053\ufff9\056\ufff9\001\002\000\014\006\005\010" +
    "\012\024\011\032\004\064\073\001\002\000\004\056\uffef" +
    "\001\002\000\006\052\327\056\uffec\001\002\000\004\056" +
    "\uffed\001\002\000\004\061\334\001\002\000\016\006\005" +
    "\010\012\024\011\026\336\032\004\062\341\001\002\000" +
    "\004\062\355\001\002\000\004\064\350\001\002\000\006" +
    "\057\070\064\343\001\002\000\016\006\005\010\012\024" +
    "\011\026\336\032\004\062\uffda\001\002\000\024\002\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\016\uffdc\024\uffdc\026\uffdc\032" +
    "\uffdc\064\uffdc\001\002\000\004\062\uffdb\001\002\000\004" +
    "\055\344\001\002\000\016\006\005\010\012\024\011\032" +
    "\004\056\uffee\064\073\001\002\000\004\056\346\001\002" +
    "\000\004\053\347\001\002\000\016\006\uffd9\010\uffd9\024" +
    "\uffd9\026\uffd9\032\uffd9\062\uffd9\001\002\000\004\055\351" +
    "\001\002\000\016\006\005\010\012\024\011\032\004\056" +
    "\uffee\064\073\001\002\000\004\056\353\001\002\000\004" +
    "\053\354\001\002\000\016\006\uffd8\010\uffd8\024\uffd8\026" +
    "\uffd8\032\uffd8\062\uffd8\001\002\000\024\002\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\016\uffdd\024\uffdd\026\uffdd\032\uffdd\064" +
    "\uffdd\001\002\000\006\053\ufff8\055\357\001\002\000\016" +
    "\006\005\010\012\024\011\032\004\056\uffee\064\073\001" +
    "\002\000\004\056\361\001\002\000\004\061\100\001\002" +
    "\000\026\002\ufff0\006\ufff0\007\ufff0\010\ufff0\016\ufff0\024" +
    "\ufff0\026\ufff0\032\ufff0\062\ufff0\064\ufff0\001\002\000\004" +
    "\002\000\001\002\000\004\055\365\001\002\000\016\006" +
    "\005\010\012\024\011\032\004\056\uffee\064\073\001\002" +
    "\000\004\056\367\001\002\000\004\061\100\001\002\000" +
    "\026\002\ufff1\006\ufff1\007\ufff1\010\ufff1\016\ufff1\024\ufff1" +
    "\026\ufff1\032\ufff1\062\ufff1\064\ufff1\001\002\000\024\002" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\016\ufffd\024\ufffd\026\ufffd" +
    "\032\ufffd\064\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\020\002\007\003\015\005\005\006\014\007" +
    "\016\011\017\013\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\064\005" +
    "\005\006\014\007\016\011\017\013\020\032\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\032\006\014\007\034\012\033\036\045\001\001\000" +
    "\002\001\001\000\004\034\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\032\006\014\007\034\012" +
    "\033\036\035\001\001\000\002\001\001\000\014\005\032" +
    "\006\014\007\034\012\033\036\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\032\006" +
    "\014\007\034\012\033\036\061\001\001\000\002\001\001" +
    "\000\004\034\053\001\001\000\002\001\001\000\014\005" +
    "\032\006\014\007\034\012\033\036\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\064\005\005\006\014\007\016\011\017\013" +
    "\020\032\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\073\006" +
    "\074\010\075\001\001\000\002\001\001\000\004\033\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\100\001\001\000\044\005\137\006\074\015\115\016\145" +
    "\017\106\020\102\021\112\022\135\023\142\024\144\025" +
    "\143\026\123\027\101\031\131\040\126\041\136\042\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\275" +
    "\026\123\027\101\031\131\042\130\001\001\000\002\001" +
    "\001\000\014\025\273\026\123\027\101\031\131\042\130" +
    "\001\001\000\002\001\001\000\014\025\272\026\123\027" +
    "\101\031\131\042\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\254\026\123\027\101\031\131\042\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\236\006\074\015\115\016\145\017\106\020" +
    "\102\021\112\022\135\023\142\024\144\025\143\026\123" +
    "\027\101\031\131\041\235\042\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\015\115\016\145\017\106\020\102\021\112" +
    "\022\135\023\142\024\144\025\143\026\123\027\101\031" +
    "\131\041\147\042\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\025\152\026\123\027" +
    "\101\030\153\031\131\042\130\001\001\000\004\035\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\212\026\123\027\101\031\131\042\130\001\001\000\014" +
    "\025\211\026\123\027\101\031\131\042\130\001\001\000" +
    "\014\025\210\026\123\027\101\031\131\042\130\001\001" +
    "\000\014\025\207\026\123\027\101\031\131\042\130\001" +
    "\001\000\002\001\001\000\014\025\206\026\123\027\101" +
    "\031\131\042\130\001\001\000\014\025\205\026\123\027" +
    "\101\031\131\042\130\001\001\000\014\025\204\026\123" +
    "\027\101\031\131\042\130\001\001\000\014\025\203\026" +
    "\123\027\101\031\131\042\130\001\001\000\014\025\202" +
    "\026\123\027\101\031\131\042\130\001\001\000\014\025" +
    "\200\026\123\027\101\031\131\042\130\001\001\000\014" +
    "\025\177\026\123\027\101\031\131\042\130\001\001\000" +
    "\014\025\176\026\123\027\101\031\131\042\130\001\001" +
    "\000\014\025\175\026\123\027\101\031\131\042\130\001" +
    "\001\000\014\025\174\026\123\027\101\031\131\042\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\025\152\026\123\027\101\030\215" +
    "\031\131\042\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\221\026\123\027\101" +
    "\031\131\042\130\001\001\000\002\001\001\000\034\015" +
    "\115\016\223\017\106\020\102\021\112\022\135\023\142" +
    "\024\144\025\143\026\123\027\101\031\131\042\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\232\026\123\027\101\031\131\042\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\251\026\123\027\101\031\131\042\130" +
    "\001\001\000\002\001\001\000\014\025\247\026\123\027" +
    "\101\031\131\042\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\260\026\123\027\101\031\131\042\130\001" +
    "\001\000\002\001\001\000\034\015\115\016\262\017\106" +
    "\020\102\021\112\022\135\023\142\024\144\025\143\026" +
    "\123\027\101\031\131\042\130\001\001\000\002\001\001" +
    "\000\034\015\115\016\264\017\106\020\102\021\112\022" +
    "\135\023\142\024\144\025\143\026\123\027\101\031\131" +
    "\042\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\300\026\123" +
    "\027\101\031\131\042\130\001\001\000\014\025\311\026" +
    "\123\027\101\031\131\042\130\001\001\000\002\001\001" +
    "\000\014\025\302\026\123\027\101\031\131\042\130\001" +
    "\001\000\002\001\001\000\014\025\304\026\123\027\101" +
    "\031\131\042\130\001\001\000\002\001\001\000\034\015" +
    "\115\016\306\017\106\020\102\021\112\022\135\023\142" +
    "\024\144\025\143\026\123\027\101\031\131\042\130\001" +
    "\001\000\002\001\001\000\034\015\115\016\310\017\106" +
    "\020\102\021\112\022\135\023\142\024\144\025\143\026" +
    "\123\027\101\031\131\042\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\313\026\123\027\101\031" +
    "\131\042\130\001\001\000\002\001\001\000\034\015\115" +
    "\016\315\017\106\020\102\021\112\022\135\023\142\024" +
    "\144\025\143\026\123\027\101\031\131\042\130\001\001" +
    "\000\002\001\001\000\034\015\115\016\317\017\106\020" +
    "\102\021\112\022\135\023\142\024\144\025\143\026\123" +
    "\027\101\031\131\042\130\001\001\000\002\001\001\000" +
    "\014\025\321\026\123\027\101\031\131\042\130\001\001" +
    "\000\004\035\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\330" +
    "\006\074\001\001\000\002\001\001\000\004\033\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\336" +
    "\014\337\037\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\336\014\337\037\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\073\006\074\010\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\073\006\074\010\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\073\006\074\010\357" +
    "\001\001\000\002\001\001\000\004\015\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\073\006\074\010\365\001\001\000\002\001\001\000" +
    "\004\015\367\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ToyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ToyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ToyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // User Generated Code

    ToyLexer s;
	@SuppressWarnings("deprecation")
    public ToyParser(ToyLexer s){ this.s=s; }
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ToyParser$actions {


	// User Generated Code

	// output the reductions and their production numbers
	// this assumes the Object is an Integer and is used when RESULT
	// is being used to hold the production number.
	private String reduction(Object... reductions) {
		String str = "";
		for(Object i: reductions) {
			str += "[reduce " + i + "] ";
		}
		return str + "\n";
	}
	
	private String shift(Object... shifts) {
		String str = "";
		for(Object i: shifts) {
		str += i +  " [shift]\n";
		}
		
		return str;
	}

  private final ToyParser parser;

  /** Constructor */
  CUP$ToyParser$actions(ToyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ToyParser$do_action_part00000000(
    int                        CUP$ToyParser$act_num,
    java_cup.runtime.lr_parser CUP$ToyParser$parser,
    java.util.Stack            CUP$ToyParser$stack,
    int                        CUP$ToyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ToyParser$result;

      /* select the action based on the action number */
      switch (CUP$ToyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decl declplus 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 101; System.out.print(reduction(d,d2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		RESULT = start_val;
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ToyParser$parser.done_parsing();
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declplus ::= decl declplus 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 201; System.out.print(reduction(d,d2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("declplus",24, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declplus ::= 
            {
              Object RESULT =null;
		 RESULT = 202; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("declplus",24, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= variable SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 301; System.out.print(reduction(v)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= functiondecl 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 302; System.out.print(reduction(f)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= classdecl 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 303; System.out.print(reduction(c)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= interfacedecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 304; System.out.print(reduction(i)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 501; System.out.print(reduction(t)+ "ID [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= ID ID 
            {
              Object RESULT =null;
		 RESULT = 502; System.out.print(shift("ID","ID")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 601; System.out.print(shift("INT")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = 602; System.out.print("DOUBLE [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = 603; System.out.print("BOOLEAN [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = 604; System.out.print("STRING [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= type LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 605; System.out.print(reduction(t) + "LEFTBRACKET [shift]\n" + "RIGHTBRACKET [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functiondecl ::= type ID LEFTPAREN formals RIGHTPAREN stmtblock 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 701; System.out.print(reduction(t) + shift("ID","LEFTPAREN") + reduction(f) + "RIGHTPAREN [shift]\n" + reduction(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("functiondecl",5, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functiondecl ::= VOID ID LEFTPAREN formals RIGHTPAREN stmtblock 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 702; System.out.print(shift("VOID","ID","LEFTPAREN") + reduction(f) + shift("RIGHTPAREN") + reduction(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("functiondecl",5, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functiondecl ::= ID ID LEFTPAREN formals RIGHTPAREN stmtblock 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 703; System.out.print(shift("ID","ID","LEFTPAREN") + reduction(f) + shift("RIGHTPAREN") + reduction(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("functiondecl",5, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= variable variablecommplus 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 801; System.out.print(reduction(v1,v2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= 
            {
              Object RESULT =null;
		 RESULT = 802; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variablecommplus ::= COMMA variable variablecommplus 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 901; System.out.print("COMMA [shift]\n" + reduction(v1,v2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variablecommplus",25, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variablecommplus ::= 
            {
              Object RESULT =null;
		 RESULT = 902; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variablecommplus",25, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classdecl ::= CLASS ID EXTENDS ID IMPLEMENTS ID idcommplus LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1001; System.out.print(shift("CLASS","ID","EXTENDS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE") + reduction(f) + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-9)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classdecl ::= CLASS ID EXTENDS ID IMPLEMENTS ID idcommplus LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 1002; System.out.print(shift("CLASS","ID","EXTENDS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE") + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-8)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classdecl ::= CLASS ID EXTENDS ID LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1003; System.out.print(shift("CLASS","ID","EXTENDS","ID","LEFTBRACE") + reduction(f) + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classdecl ::= CLASS ID EXTENDS ID LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1004; System.out.print(shift("CLASS","ID","EXTENDS","ID","LEFTBRACE","RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdecl ::= CLASS ID IMPLEMENTS ID idcommplus LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1005; System.out.print(shift("CLASS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE") + reduction(f) + shift("RIGHTBRACE"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-7)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdecl ::= CLASS ID IMPLEMENTS ID idcommplus LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 1006; System.out.print(shift("CLASS","ID","IMPLEMENTS","ID") + reduction(i) + shift("LEFTBRACE", "RIGHTBRACE"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdecl ::= CLASS ID LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1007; System.out.print(shift("CLASS","ID","LEFTBRACE") + reduction(f) + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdecl ::= CLASS ID LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1008; System.out.print(shift("CLASS","ID","LEFTBRACE","RIGHTBRACE"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fieldstar ::= field fieldstar 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1101; System.out.print(reduction(f1,f2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("fieldstar",28, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fieldstar ::= field 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1102; System.out.print(reduction(f1)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("fieldstar",28, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // idcommplus ::= COMMA ID idcommplus 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1201; System.out.print(shift("COMMA", "ID") + reduction(i)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("idcommplus",26, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // idcommplus ::= 
            {
              Object RESULT =null;
		 RESULT = 1202; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("idcommplus",26, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field ::= variable SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;

              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("field",8, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field ::= functiondecl 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1302; System.out.print(reduction(f)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("field",8, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // interfacedecl ::= INTERFACE ID LEFTBRACE prototypestar RIGHTBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1401; System.out.print(shift("INTERFACE", "ID", "LEFTBRACE") + reduction(p) + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("interfacedecl",9, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // interfacedecl ::= INTERFACE ID LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1402; System.out.print(shift("INTERFACE", "ID", "LEFTBRACE", "RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("interfacedecl",9, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // prototypestar ::= prototype prototypestar 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1501; System.out.print(reduction(p1,p2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("prototypestar",29, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // prototypestar ::= prototype 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1502; System.out.print(reduction(p1)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("prototypestar",29, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // prototype ::= type ID LEFTPAREN formals RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 1601; System.out.print(reduction(t) + shift("ID", "LEFTPAREN") + reduction(f) + shift("RIGHTPAREN","SEMICOLON"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("prototype",10, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // prototype ::= VOID ID LEFTPAREN formals RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 1602; System.out.print(shift("VOID", "ID", "LEFTPAREN") + reduction(f) + shift("RIGHTPAREN","SEMICOLON"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("prototype",10, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmtblock ::= LEFTBRACE variabledeclstar stmtstar RIGHTBRACE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1701; System.out.print(shift("LEFTBRACE") + reduction(v,s) + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmtblock ::= LEFTBRACE stmtstar RIGHTBRACE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1702; System.out.print(shift("LEFTBRACE") + reduction(s) + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmtblock ::= LEFTBRACE variabledeclstar RIGHTBRACE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1703; System.out.print(shift("LEFTBRACE") + reduction(v) + shift("RIGHTBRACE")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmtblock ::= LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1704; System.out.print(shift("LEFTBRACE", "RIGHTBRACE"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variabledeclstar ::= variabledeclstar variable SEMICOLON 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 1801; System.out.print(reduction(v1,v2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variabledeclstar",30, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variabledeclstar ::= variable SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;

              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variabledeclstar",30, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmtstar ::= stmt stmtstar 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1901; System.out.print(reduction(s1,s2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtstar",31, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmtstar ::= stmt 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 1902; System.out.print(reduction(s1)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtstar",31, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 2001; System.out.print(reduction(e) + shift("SEMICOLON")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2002; System.out.print(shift("SEMICOLON")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= ifstmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2003; System.out.print(reduction(i)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= whilestmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2004; System.out.print(reduction(w)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= forstmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2005; System.out.print(reduction(f)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= breakstmt 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2006; System.out.print(reduction(b)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= returnstmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2007; System.out.print(reduction(r)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= printstmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2008; System.out.print(reduction(p)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= stmtblock 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2009; System.out.print(reduction(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ifstmt ::= IF LEFTPAREN expr RIGHTPAREN stmt ELSE stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2101; System.out.print(shift("IF","LEFTPAREN") + reduction(e) + shift("RIGHTPAREN") + reduction(s1) + shift("ELSE") + reduction(s2));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("ifstmt",13, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ifstmt ::= IF LEFTPAREN expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2102; System.out.print(shift("IF","LEFTPAREN") + reduction(e) + shift("RIGHTPAREN") + reduction(s1)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("ifstmt",13, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // whilestmt ::= WHILE LEFTPAREN expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2201; System.out.print(shift("WHILE","LEFTPAREN") + reduction(e) + shift("RIGHTPAREN") + reduction(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("whilestmt",14, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // forstmt ::= FOR LEFTPAREN expr SEMICOLON expr SEMICOLON expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2301; System.out.print(shift("FOR","LEFTPAREN") + reduction(e1) + shift("SEMICOLON") + reduction(e2) + shift("SEMICOLON") + reduction(e3) + shift("RIGHTPAREN") + reduction(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-8)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // forstmt ::= FOR LEFTPAREN expr SEMICOLON expr SEMICOLON RIGHTPAREN stmt 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2302; System.out.print(shift("FOR","LEFTPAREN") + reduction(e1) + shift("SEMICOLON") + reduction(e2) + shift("SEMICOLON", "RIGHTPAREN") + shift(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-7)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // forstmt ::= FOR LEFTPAREN SEMICOLON expr SEMICOLON expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2303; System.out.print(shift("FOR","LEFTPAREN","SEMICOLON") + reduction(e1) + shift("SEMICOLON") + reduction(e2) + shift("RIGHTPAREN") + shift(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-7)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // forstmt ::= FOR LEFTPAREN SEMICOLON expr SEMICOLON RIGHTPAREN stmt 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2304; System.out.print(shift("FOR","LEFTPAREN","SEMICOLON") + reduction(e1) + shift("SEMICOLON", "RIGHTPAREN") + reduction(s)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // breakstmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2401; System.out.print(shift("BREAK","SEMICOLON"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("breakstmt",16, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // returnstmt ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 2501; System.out.print(shift("RETURN") + reduction(e1) + shift("SEMICOLON"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("returnstmt",17, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // returnstmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2502; System.out.print(shift("RETURN","SEMICOLON")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("returnstmt",17, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // printstmt ::= PRINTLN LEFTPAREN expr exprcommplus RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 2601; System.out.print(shift("PRINTLN", "LEFTPAREN")+ reduction(e1,e2) + shift("RIGHTPAREN","SEMICOLON"));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("printstmt",18, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exprcommplus ::= COMMA expr exprcommplus 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2701; System.out.print(shift("COMMA")+reduction(e1,e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("exprcommplus",27, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exprcommplus ::= 
            {
              Object RESULT =null;
		 RESULT = 2702; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("exprcommplus",27, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= lvalue ASSIGNOP expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2801; System.out.print(reduction(l)+shift("ASSIGNOP")+reduction(e)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2802; System.out.print(reduction(c)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= THIS 
            {
              Object RESULT =null;
		 RESULT = 2804; System.out.print(shift("THIS")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= call 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2805; System.out.print(reduction(c)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= LEFTPAREN expr RIGHTPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 2806; System.out.print(shift("LEFTPAREN") + reduction(e) + shift("RIGHTPAREN")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2807; System.out.print(reduction(e1) + shift("PLUS") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2808; System.out.print(reduction(e1) + shift("MINUS") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr MULTIPLICATION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2809; System.out.print(reduction(e1) + shift("MULTIPLICATION") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2810; System.out.print(reduction(e1) + shift("DIVISION") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr MOD expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2811; System.out.print(reduction(e1) + shift("MOD") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= MINUS expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2812; System.out.print(shift("MINUS") + reduction(e)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr LESS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2813; System.out.print(reduction(e1) + shift("LESS") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr LESSEQUAL expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2814; System.out.print(reduction(e1) + shift("LESSEQUAL") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr GREATER expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2815; System.out.print(reduction(e1) + shift("GREATER") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr GREATEREQUAL expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2816; System.out.print(reduction(e1) + shift("GREATEREQUAL") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr EQUAL expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2817; System.out.print(reduction(e1) + shift("EQUAL") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr NOTEQUAL expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2818; System.out.print(reduction(e1) + shift("NOTEQUAL") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr AND expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2819; System.out.print(reduction(e1) + shift("AND") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr OR expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2820; System.out.print(reduction(e1) + shift("OR") + reduction(e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= NOT expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2821; System.out.print(shift("NOT") + reduction(e)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= READLN LEFTPAREN RIGHTPAREN 
            {
              Object RESULT =null;
		 RESULT = 2822; System.out.print(shift("READLN","LEFTPAREN","RIGHTPAREN")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= NEW LEFTPAREN ID RIGHTPAREN 
            {
              Object RESULT =null;
		 RESULT = 2823; System.out.print(shift("NEW","LEFTPAREN","ID","RIGHTPAREN")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= NEWARRAY LEFTPAREN INTCONSTANT COMMA type RIGHTPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 2824; System.out.print(shift("NEWARRAY","LEFTPAREN","INTCONSTANT","COMMA") + reduction(t) + shift("RIGHTPAREN")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= lvaluenotid 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2825; System.out.print(reduction(l)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= ID 
            {
              Object RESULT =null;
		 RESULT = 2825; System.out.print(shift("ID")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lvalue ::= ID 
            {
              Object RESULT =null;
		 RESULT = 2902; System.out.print(shift("ID")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvalue",20, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lvalue ::= lvaluenotid 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 2903; System.out.print(reduction(l)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvalue",20, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // call ::= ID LEFTPAREN actuals RIGHTPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 3001; System.out.print("ID [shift]\nLEFTPAREN [shift]" + reduction(a) + "RIGHTPARENT [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // call ::= ID PERIOD ID LEFTPAREN actuals RIGHTPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 3002; System.out.print("ID [shift]\nPERIOD [shift]\nID [shift]\nLEFTPAREN [shift]\n" + reduction(a) + "RIGHTPAREN [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // actuals ::= expr exprcommplus 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 3101; System.out.print(reduction(e1,e2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("actuals",22, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // actuals ::= 
            {
              Object RESULT =null;
		 RESULT = 3102; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("actuals",22, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constant ::= INTCONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3201; System.out.println("INTCONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // constant ::= DOUBLECONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3202; System.out.println("DOUBLECONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // constant ::= STRINGCONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3203; System.out.println("STRINGCONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // constant ::= BOOLEANCONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3204; System.out.println("BOOLEANCONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // constant ::= NULL 
            {
              Object RESULT =null;
		 RESULT = 3205; System.out.println("NULL [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lvaluenotid ::= lvalue LEFTBRACKET expr RIGHTBRACKET 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 3301; System.out.print(reduction(l) + shift("LEFTBRACKET") + reduction(e) + shift("RIGHTBRACKET")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvaluenotid",32, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lvaluenotid ::= lvaluenotid LEFTBRACKET expr RIGHTBRACKET 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 3302; System.out.print(reduction(l) + shift("LEFTBRACKET") + reduction(e) + shift("RIGHTBRACKET")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvaluenotid",32, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lvaluenotid ::= lvalue PERIOD ID 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 3303; System.out.print(reduction(l) + shift("PERIOD", "ID")); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvaluenotid",32, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ToyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ToyParser$do_action(
    int                        CUP$ToyParser$act_num,
    java_cup.runtime.lr_parser CUP$ToyParser$parser,
    java.util.Stack            CUP$ToyParser$stack,
    int                        CUP$ToyParser$top)
    throws java.lang.Exception
    {
              return CUP$ToyParser$do_action_part00000000(
                               CUP$ToyParser$act_num,
                               CUP$ToyParser$parser,
                               CUP$ToyParser$stack,
                               CUP$ToyParser$top);
    }
}

}
