
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxAnalyzer;

import java_cup.runtime.*;
import lexicalAnalyzer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ToyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ToyParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ToyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ToyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ToyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\004\000\002\032" +
    "\004\000\002\032\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\004\000" +
    "\002\005\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\003\000\002\007\010\000\002\007\010\000\002\010\004" +
    "\000\002\010\002\000\002\033\005\000\002\033\002\000" +
    "\002\011\014\000\002\011\013\000\002\011\011\000\002" +
    "\011\010\000\002\011\012\000\002\011\011\000\002\011" +
    "\007\000\002\011\006\000\002\036\004\000\002\034\005" +
    "\000\002\034\002\000\002\012\003\000\002\012\003\000" +
    "\002\013\007\000\002\013\006\000\002\037\004\000\002" +
    "\014\010\000\002\014\010\000\002\015\006\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\040\004" +
    "\000\002\041\004\000\002\016\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\011\000\002\017\007\000\002\020\007" +
    "\000\002\021\013\000\002\021\012\000\002\021\012\000" +
    "\002\021\011\000\002\022\004\000\002\023\005\000\002" +
    "\023\004\000\002\024\010\000\002\035\005\000\002\035" +
    "\002\000\002\025\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\004\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\004\000\002\025\005\000\002" +
    "\025\006\000\002\025\010\000\002\026\006\000\002\026" +
    "\005\000\002\026\006\000\002\026\005\000\002\027\006" +
    "\000\002\027\010\000\002\030\004\000\002\030\002\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\022\006\006\007\023\010\013\016\016\024" +
    "\012\026\010\032\005\064\014\001\002\000\024\002\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\016\ufffd\024\ufffd\026\ufffd\032" +
    "\ufffd\064\ufffd\001\002\000\010\056\ufff7\057\ufff7\064\ufff7" +
    "\001\002\000\010\056\ufff5\057\ufff5\064\ufff5\001\002\000" +
    "\004\053\357\001\002\000\004\064\352\001\002\000\004" +
    "\002\351\001\002\000\010\056\ufff4\057\ufff4\064\ufff4\001" +
    "\002\000\010\056\ufff6\057\ufff6\064\ufff6\001\002\000\010" +
    "\056\ufff2\057\ufff2\064\ufff2\001\002\000\006\057\100\064" +
    "\123\001\002\000\004\064\067\001\002\000\024\002\ufffe" +
    "\006\006\007\023\010\013\016\016\024\012\026\010\032" +
    "\005\064\014\001\002\000\024\002\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\016\ufffb\024\ufffb\026\ufffb\032\ufffb\064\ufffb\001" +
    "\002\000\024\002\ufffc\006\ufffc\007\ufffc\010\ufffc\016\ufffc" +
    "\024\ufffc\026\ufffc\032\ufffc\064\ufffc\001\002\000\024\002" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\016\ufffa\024\ufffa\026\ufffa" +
    "\032\ufffa\064\ufffa\001\002\000\004\064\024\001\002\000" +
    "\010\012\025\015\027\061\026\001\002\000\004\064\050" +
    "\001\002\000\020\006\006\010\013\024\012\026\010\032" +
    "\005\062\045\064\014\001\002\000\004\064\030\001\002" +
    "\000\006\052\031\061\uffe1\001\002\000\004\064\043\001" +
    "\002\000\004\061\033\001\002\000\020\006\006\010\013" +
    "\024\012\026\010\032\005\062\040\064\014\001\002\000" +
    "\016\006\uffe0\010\uffe0\024\uffe0\026\uffe0\032\uffe0\064\uffe0" +
    "\001\002\000\016\006\006\010\013\024\012\026\010\032" +
    "\005\064\014\001\002\000\016\006\uffdf\010\uffdf\024\uffdf" +
    "\026\uffdf\032\uffdf\064\uffdf\001\002\000\004\062\041\001" +
    "\002\000\024\002\uffe6\006\uffe6\007\uffe6\010\uffe6\016\uffe6" +
    "\024\uffe6\026\uffe6\032\uffe6\064\uffe6\001\002\000\024\002" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\016\uffe7\024\uffe7\026\uffe7" +
    "\032\uffe7\064\uffe7\001\002\000\004\062\uffe3\001\002\000" +
    "\006\052\031\061\uffe1\001\002\000\004\061\uffe2\001\002" +
    "\000\024\002\uffe4\006\uffe4\007\uffe4\010\uffe4\016\uffe4\024" +
    "\uffe4\026\uffe4\032\uffe4\064\uffe4\001\002\000\004\062\047" +
    "\001\002\000\024\002\uffe5\006\uffe5\007\uffe5\010\uffe5\016" +
    "\uffe5\024\uffe5\026\uffe5\032\uffe5\064\uffe5\001\002\000\006" +
    "\015\052\061\051\001\002\000\020\006\006\010\013\024" +
    "\012\026\010\032\005\062\061\064\014\001\002\000\004" +
    "\064\053\001\002\000\006\052\031\061\uffe1\001\002\000" +
    "\004\061\055\001\002\000\020\006\006\010\013\024\012" +
    "\026\010\032\005\062\057\064\014\001\002\000\004\062" +
    "\060\001\002\000\024\002\uffea\006\uffea\007\uffea\010\uffea" +
    "\016\uffea\024\uffea\026\uffea\032\uffea\064\uffea\001\002\000" +
    "\024\002\uffeb\006\uffeb\007\uffeb\010\uffeb\016\uffeb\024\uffeb" +
    "\026\uffeb\032\uffeb\064\uffeb\001\002\000\024\002\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\016\uffe8\024\uffe8\026\uffe8\032\uffe8" +
    "\064\uffe8\001\002\000\004\062\063\001\002\000\024\002" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\016\uffe9\024\uffe9\026\uffe9" +
    "\032\uffe9\064\uffe9\001\002\000\004\002\001\001\002\000" +
    "\024\002\ufffe\006\006\007\023\010\013\016\016\024\012" +
    "\026\010\032\005\064\014\001\002\000\004\002\uffff\001" +
    "\002\000\004\061\070\001\002\000\020\006\006\010\013" +
    "\024\012\026\072\032\005\062\075\064\014\001\002\000" +
    "\004\062\122\001\002\000\004\064\115\001\002\000\006" +
    "\057\100\064\077\001\002\000\016\006\006\010\013\024" +
    "\012\026\072\032\005\064\014\001\002\000\024\002\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\016\uffdd\024\uffdd\026\uffdd\032" +
    "\uffdd\064\uffdd\001\002\000\004\062\uffdc\001\002\000\004" +
    "\055\102\001\002\000\004\060\101\001\002\000\010\056" +
    "\ufff3\057\ufff3\064\ufff3\001\002\000\016\006\006\010\013" +
    "\024\012\032\005\056\uffee\064\014\001\002\000\006\052" +
    "\111\056\uffec\001\002\000\006\057\100\064\110\001\002" +
    "\000\004\056\106\001\002\000\004\053\107\001\002\000" +
    "\016\006\uffdb\010\uffdb\024\uffdb\026\uffdb\032\uffdb\064\uffdb" +
    "\001\002\000\010\052\ufff8\053\ufff8\056\ufff8\001\002\000" +
    "\014\006\006\010\013\024\012\032\005\064\014\001\002" +
    "\000\004\056\uffef\001\002\000\006\052\111\056\uffec\001" +
    "\002\000\004\056\uffed\001\002\000\004\055\116\001\002" +
    "\000\016\006\006\010\013\024\012\032\005\056\uffee\064" +
    "\014\001\002\000\004\056\120\001\002\000\004\053\121" +
    "\001\002\000\016\006\uffda\010\uffda\024\uffda\026\uffda\032" +
    "\uffda\064\uffda\001\002\000\024\002\uffde\006\uffde\007\uffde" +
    "\010\uffde\016\uffde\024\uffde\026\uffde\032\uffde\064\uffde\001" +
    "\002\000\006\053\ufff8\055\124\001\002\000\016\006\006" +
    "\010\013\024\012\032\005\056\uffee\064\014\001\002\000" +
    "\004\056\126\001\002\000\004\061\130\001\002\000\024" +
    "\002\ufff1\006\ufff1\007\ufff1\010\ufff1\016\ufff1\024\ufff1\026" +
    "\ufff1\032\ufff1\064\ufff1\001\002\000\066\006\006\010\013" +
    "\013\135\014\147\017\156\020\145\021\134\022\163\023" +
    "\153\024\012\025\150\027\167\030\162\031\160\032\005" +
    "\034\136\050\141\053\142\055\140\061\130\062\164\063" +
    "\152\064\151\065\155\066\144\067\170\001\002\000\044" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\052\uffb9\053\uffb9\056\uffb9\060\uffb9\001\002\000\014\006" +
    "\006\010\013\024\012\032\005\064\014\001\002\000\056" +
    "\011\uffd0\013\uffd0\014\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\034\uffd0" +
    "\050\uffd0\053\uffd0\055\uffd0\061\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\001\002\000\004\055\343\001\002" +
    "\000\004\055\321\001\002\000\034\017\156\020\145\022" +
    "\163\025\150\031\160\034\136\050\141\055\140\063\152" +
    "\064\175\065\155\066\144\067\170\001\002\000\056\011" +
    "\uffd1\013\uffd1\014\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\034\uffd1\050" +
    "\uffd1\053\uffd1\055\uffd1\061\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\001\002\000\034\017\156\020\145\022" +
    "\163\025\150\031\160\034\136\050\141\055\140\063\152" +
    "\064\175\065\155\066\144\067\170\001\002\000\034\017" +
    "\156\020\145\022\163\025\150\031\160\034\136\050\141" +
    "\055\140\063\152\064\175\065\155\066\144\067\170\001" +
    "\002\000\056\011\uffd2\013\uffd2\014\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\025\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\034\uffd2\050\uffd2\053\uffd2\055\uffd2\061\uffd2\063\uffd2" +
    "\064\uffd2\065\uffd2\066\uffd2\067\uffd2\001\002\000\056\011" +
    "\uffcf\013\uffcf\014\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\050" +
    "\uffcf\053\uffcf\055\uffcf\061\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\001\002\000\044\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\047\uff9c\052\uff9c\053\uff9c\056" +
    "\uff9c\060\uff9c\001\002\000\004\055\310\001\002\000\056" +
    "\011\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\034\uffcb" +
    "\050\uffcb\053\uffcb\055\uffcb\061\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\001\002\000\004\055\302\001\002" +
    "\000\044\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\052\uffba\053\uffba\056\uffba\060\uffba\001\002\000" +
    "\012\054\200\055\201\057\177\064\ufff2\001\002\000\044" +
    "\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d" +
    "\052\uff9d\053\uff9d\056\uff9d\060\uff9d\001\002\000\036\017" +
    "\156\020\145\022\163\025\150\031\160\034\136\050\141" +
    "\053\277\055\140\063\152\064\175\065\155\066\144\067" +
    "\170\001\002\000\052\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\051\272\052\uffbb\053\uffbb\054\271" +
    "\056\uffbb\057\270\060\uffbb\001\002\000\044\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\052\uff9b\053" +
    "\uff9b\056\uff9b\060\uff9b\001\002\000\004\055\265\001\002" +
    "\000\056\013\135\014\147\017\156\020\145\021\134\022" +
    "\163\023\153\025\150\027\167\030\162\031\160\034\136" +
    "\050\141\053\142\055\140\061\130\062\263\063\152\064" +
    "\175\065\155\066\144\067\170\001\002\000\044\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\052\uff99" +
    "\053\uff99\056\uff99\060\uff99\001\002\000\044\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\052\uffbc\053" +
    "\uffbc\056\uffbc\060\uffbc\001\002\000\004\053\261\001\002" +
    "\000\004\055\257\001\002\000\076\002\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\050\uffd6" +
    "\053\uffd6\055\uffd6\061\uffd6\063\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\001\002\000\056\011\uffce\013\uffce\014\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\025\uffce\027" +
    "\uffce\030\uffce\031\uffce\034\uffce\050\uffce\053\uffce\055\uffce" +
    "\061\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\001" +
    "\002\000\004\062\256\001\002\000\004\055\252\001\002" +
    "\000\044\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\052\uff9a\053\uff9a\056\uff9a\060\uff9a\001\002\000" +
    "\056\011\uffcd\013\uffcd\014\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\034" +
    "\uffcd\050\uffcd\053\uffcd\055\uffcd\061\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\001\002\000\036\033\215\034" +
    "\205\035\223\036\220\037\210\040\216\041\213\042\212" +
    "\043\221\044\214\045\207\046\206\047\222\053\251\001" +
    "\002\000\056\011\uffcc\013\uffcc\014\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\025\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\034\uffcc\050\uffcc\053\uffcc\055\uffcc\061\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\067\uffcc\001\002\000\054\013" +
    "\135\014\147\017\156\020\145\021\134\022\163\023\153" +
    "\025\150\027\167\030\162\031\160\034\136\050\141\053" +
    "\142\055\140\061\130\063\152\064\175\065\155\066\144" +
    "\067\170\001\002\000\010\054\200\055\201\057\177\001" +
    "\002\000\004\062\uffd4\001\002\000\034\017\156\020\145" +
    "\022\163\025\150\031\160\034\136\050\141\055\140\063" +
    "\152\064\175\065\155\066\144\067\170\001\002\000\004" +
    "\064\243\001\002\000\036\017\156\020\145\022\163\025" +
    "\150\031\160\034\136\050\141\055\140\056\uff9e\063\152" +
    "\064\175\065\155\066\144\067\170\001\002\000\040\033" +
    "\215\034\205\035\223\036\220\037\210\040\216\041\213" +
    "\042\212\043\221\044\214\045\207\046\206\047\222\052" +
    "\217\056\uffbe\001\002\000\004\056\204\001\002\000\044" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\052\uffa1\053\uffa1\056\uffa1\060\uffa1\001\002\000\034\017" +
    "\156\020\145\022\163\025\150\031\160\034\136\050\141" +
    "\055\140\063\152\064\175\065\155\066\144\067\170\001" +
    "\002\000\034\017\156\020\145\022\163\025\150\031\160" +
    "\034\136\050\141\055\140\063\152\064\175\065\155\066" +
    "\144\067\170\001\002\000\034\017\156\020\145\022\163" +
    "\025\150\031\160\034\136\050\141\055\140\063\152\064" +
    "\175\065\155\066\144\067\170\001\002\000\034\017\156" +
    "\020\145\022\163\025\150\031\160\034\136\050\141\055" +
    "\140\063\152\064\175\065\155\066\144\067\170\001\002" +
    "\000\004\056\uff9f\001\002\000\034\017\156\020\145\022" +
    "\163\025\150\031\160\034\136\050\141\055\140\063\152" +
    "\064\175\065\155\066\144\067\170\001\002\000\034\017" +
    "\156\020\145\022\163\025\150\031\160\034\136\050\141" +
    "\055\140\063\152\064\175\065\155\066\144\067\170\001" +
    "\002\000\034\017\156\020\145\022\163\025\150\031\160" +
    "\034\136\050\141\055\140\063\152\064\175\065\155\066" +
    "\144\067\170\001\002\000\034\017\156\020\145\022\163" +
    "\025\150\031\160\034\136\050\141\055\140\063\152\064" +
    "\175\065\155\066\144\067\170\001\002\000\034\017\156" +
    "\020\145\022\163\025\150\031\160\034\136\050\141\055" +
    "\140\063\152\064\175\065\155\066\144\067\170\001\002" +
    "\000\034\017\156\020\145\022\163\025\150\031\160\034" +
    "\136\050\141\055\140\063\152\064\175\065\155\066\144" +
    "\067\170\001\002\000\034\017\156\020\145\022\163\025" +
    "\150\031\160\034\136\050\141\055\140\063\152\064\175" +
    "\065\155\066\144\067\170\001\002\000\034\017\156\020" +
    "\145\022\163\025\150\031\160\034\136\050\141\055\140" +
    "\063\152\064\175\065\155\066\144\067\170\001\002\000" +
    "\034\017\156\020\145\022\163\025\150\031\160\034\136" +
    "\050\141\055\140\063\152\064\175\065\155\066\144\067" +
    "\170\001\002\000\034\017\156\020\145\022\163\025\150" +
    "\031\160\034\136\050\141\055\140\063\152\064\175\065" +
    "\155\066\144\067\170\001\002\000\044\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\052\uffb5\053\uffb5" +
    "\056\uffb5\060\uffb5\001\002\000\044\033\215\034\205\035" +
    "\223\036\220\037\210\040\216\041\213\042\212\043\221" +
    "\044\214\045\207\046\206\047\uffaa\052\uffaa\053\uffaa\056" +
    "\uffaa\060\uffaa\001\002\000\044\033\215\034\205\035\223" +
    "\036\220\037\210\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\052\uffae\053\uffae\056\uffae" +
    "\060\uffae\001\002\000\044\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\052\uffb4\053\uffb4\056\uffb4\060" +
    "\uffb4\001\002\000\040\033\215\034\205\035\223\036\220" +
    "\037\210\040\216\041\213\042\212\043\221\044\214\045" +
    "\207\046\206\047\222\052\217\056\uffbe\001\002\000\004" +
    "\056\uffbf\001\002\000\044\033\215\034\205\035\223\036" +
    "\220\037\210\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\052\uffb1\053\uffb1\056\uffb1\060" +
    "\uffb1\001\002\000\044\033\uffb7\034\uffb7\035\223\036\220" +
    "\037\210\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\052\uffb7\053\uffb7\056\uffb7\060\uffb7" +
    "\001\002\000\044\033\215\034\205\035\223\036\220\037" +
    "\210\040\216\041\213\042\212\043\221\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\052\uffad\053\uffad\056\uffad\060\uffad\001" +
    "\002\000\044\033\215\034\205\035\223\036\220\037\210" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\052\uffaf\053\uffaf\056\uffaf\060\uffaf\001\002" +
    "\000\044\033\215\034\205\035\223\036\220\037\210\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\052\uffb0\053\uffb0\056\uffb0\060\uffb0\001\002\000" +
    "\044\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\052\uffb3\053\uffb3\056\uffb3\060\uffb3\001\002\000\044" +
    "\033\215\034\205\035\223\036\220\037\210\040\216\041" +
    "\213\042\212\043\221\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\052\uffac\053\uffac\056\uffac\060\uffac\001\002\000\044\033" +
    "\215\034\205\035\223\036\220\037\210\040\216\041\213" +
    "\042\212\043\221\044\214\045\207\046\uffab\047\uffab\052" +
    "\uffab\053\uffab\056\uffab\060\uffab\001\002\000\044\033\uffb6" +
    "\034\uffb6\035\223\036\220\037\210\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\052\uffb6" +
    "\053\uffb6\056\uffb6\060\uffb6\001\002\000\054\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\055\244\056\uffa4\057\uffa4\060\uffa4" +
    "\001\002\000\036\017\156\020\145\022\163\025\150\031" +
    "\160\034\136\050\141\055\140\056\uff9e\063\152\064\175" +
    "\065\155\066\144\067\170\001\002\000\004\056\246\001" +
    "\002\000\044\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\052\uffa0\053\uffa0\056\uffa0\060\uffa0\001\002" +
    "\000\036\033\215\034\205\035\223\036\220\037\210\040" +
    "\216\041\213\042\212\043\221\044\214\045\207\046\206" +
    "\047\222\060\250\001\002\000\052\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\001\002\000\056" +
    "\011\uffd3\013\uffd3\014\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\025\uffd3\027\uffd3\030\uffd3\031\uffd3\034\uffd3" +
    "\050\uffd3\053\uffd3\055\uffd3\061\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\001\002\000\034\017\156\020\145" +
    "\022\163\025\150\031\160\034\136\050\141\055\140\063" +
    "\152\064\175\065\155\066\144\067\170\001\002\000\036" +
    "\033\215\034\205\035\223\036\220\037\210\040\216\041" +
    "\213\042\212\043\221\044\214\045\207\046\206\047\222" +
    "\056\254\001\002\000\054\013\135\014\147\017\156\020" +
    "\145\021\134\022\163\023\153\025\150\027\167\030\162" +
    "\031\160\034\136\050\141\053\142\055\140\061\130\063" +
    "\152\064\175\065\155\066\144\067\170\001\002\000\056" +
    "\011\uffc8\013\uffc8\014\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\034\uffc8" +
    "\050\uffc8\053\uffc8\055\uffc8\061\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\067\uffc8\001\002\000\076\002\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\050" +
    "\uffd8\053\uffd8\055\uffd8\061\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\001\002\000\004\056\260\001\002\000" +
    "\044\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\052\uffa8\053\uffa8\056\uffa8\060\uffa8\001\002\000\056" +
    "\011\uffc3\013\uffc3\014\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\034\uffc3" +
    "\050\uffc3\053\uffc3\055\uffc3\061\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\001\002\000\004\062\264\001\002" +
    "\000\076\002\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013" +
    "\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\034\uffd7\050\uffd7\053\uffd7\055\uffd7\061\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002\000" +
    "\076\002\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9" +
    "\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\034\uffd9\050\uffd9\053\uffd9\055\uffd9\061\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002\000\004" +
    "\064\266\001\002\000\004\056\267\001\002\000\044\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\052" +
    "\uffa7\053\uffa7\056\uffa7\060\uffa7\001\002\000\034\017\156" +
    "\020\145\022\163\025\150\031\160\034\136\050\141\055" +
    "\140\063\152\064\175\065\155\066\144\067\170\001\002" +
    "\000\004\064\274\001\002\000\034\017\156\020\145\022" +
    "\163\025\150\031\160\034\136\050\141\055\140\063\152" +
    "\064\175\065\155\066\144\067\170\001\002\000\044\033" +
    "\215\034\205\035\223\036\220\037\210\040\216\041\213" +
    "\042\212\043\221\044\214\045\207\046\206\047\222\052" +
    "\uffbd\053\uffbd\056\uffbd\060\uffbd\001\002\000\052\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\056\uffa2\057\uffa2\060\uffa2\001" +
    "\002\000\036\033\215\034\205\035\223\036\220\037\210" +
    "\040\216\041\213\042\212\043\221\044\214\045\207\046" +
    "\206\047\222\060\276\001\002\000\052\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\001\002\000" +
    "\056\011\uffc1\013\uffc1\014\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\034" +
    "\uffc1\050\uffc1\053\uffc1\055\uffc1\061\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\001\002\000\036\033\215\034" +
    "\205\035\223\036\220\037\210\040\216\041\213\042\212" +
    "\043\221\044\214\045\207\046\206\047\222\053\301\001" +
    "\002\000\056\011\uffc2\013\uffc2\014\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\025\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\034\uffc2\050\uffc2\053\uffc2\055\uffc2\061\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\001\002\000\034\017" +
    "\156\020\145\022\163\025\150\031\160\034\136\050\141" +
    "\055\140\063\152\064\175\065\155\066\144\067\170\001" +
    "\002\000\036\033\215\034\205\035\223\036\220\037\210" +
    "\040\216\041\213\042\212\043\221\044\214\045\207\046" +
    "\206\047\222\056\304\001\002\000\054\013\135\014\147" +
    "\017\156\020\145\021\134\022\163\023\153\025\150\027" +
    "\167\030\162\031\160\034\136\050\141\053\142\055\140" +
    "\061\130\063\152\064\175\065\155\066\144\067\170\001" +
    "\002\000\056\011\306\013\uffc9\014\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\025\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\034\uffc9\050\uffc9\053\uffc9\055\uffc9\061\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\067\uffc9\001\002\000\054\013" +
    "\135\014\147\017\156\020\145\021\134\022\163\023\153" +
    "\025\150\027\167\030\162\031\160\034\136\050\141\053" +
    "\142\055\140\061\130\063\152\064\175\065\155\066\144" +
    "\067\170\001\002\000\056\011\uffca\013\uffca\014\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\025\uffca\027\uffca" +
    "\030\uffca\031\uffca\034\uffca\050\uffca\053\uffca\055\uffca\061" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\001\002" +
    "\000\004\063\311\001\002\000\004\052\312\001\002\000" +
    "\014\006\006\010\013\024\012\032\005\064\014\001\002" +
    "\000\006\056\314\057\100\001\002\000\044\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\052\uffa6\053" +
    "\uffa6\056\uffa6\060\uffa6\001\002\000\044\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\052\uffa9\053\uffa9" +
    "\056\uffa9\060\uffa9\001\002\000\036\033\215\034\205\035" +
    "\223\036\220\037\210\040\216\041\213\042\212\043\221" +
    "\044\214\045\207\046\206\047\222\056\317\001\002\000" +
    "\044\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047" +
    "\uffb8\052\uffb8\053\uffb8\056\uffb8\060\uffb8\001\002\000\044" +
    "\033\uffb2\034\uffb2\035\223\036\220\037\210\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\052\uffb2\053\uffb2\056\uffb2\060\uffb2\001\002\000\036\017" +
    "\156\020\145\022\163\025\150\031\160\034\136\050\141" +
    "\053\322\055\140\063\152\064\175\065\155\066\144\067" +
    "\170\001\002\000\034\017\156\020\145\022\163\025\150" +
    "\031\160\034\136\050\141\055\140\063\152\064\175\065" +
    "\155\066\144\067\170\001\002\000\036\033\215\034\205" +
    "\035\223\036\220\037\210\040\216\041\213\042\212\043" +
    "\221\044\214\045\207\046\206\047\222\053\324\001\002" +
    "\000\034\017\156\020\145\022\163\025\150\031\160\034" +
    "\136\050\141\055\140\063\152\064\175\065\155\066\144" +
    "\067\170\001\002\000\036\033\215\034\205\035\223\036" +
    "\220\037\210\040\216\041\213\042\212\043\221\044\214" +
    "\045\207\046\206\047\222\053\326\001\002\000\036\017" +
    "\156\020\145\022\163\025\150\031\160\034\136\050\141" +
    "\055\140\056\330\063\152\064\175\065\155\066\144\067" +
    "\170\001\002\000\036\033\215\034\205\035\223\036\220" +
    "\037\210\040\216\041\213\042\212\043\221\044\214\045" +
    "\207\046\206\047\222\056\332\001\002\000\054\013\135" +
    "\014\147\017\156\020\145\021\134\022\163\023\153\025" +
    "\150\027\167\030\162\031\160\034\136\050\141\053\142" +
    "\055\140\061\130\063\152\064\175\065\155\066\144\067" +
    "\170\001\002\000\056\011\uffc6\013\uffc6\014\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\034\uffc6\050\uffc6\053\uffc6\055\uffc6\061\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\001\002\000" +
    "\054\013\135\014\147\017\156\020\145\021\134\022\163" +
    "\023\153\025\150\027\167\030\162\031\160\034\136\050" +
    "\141\053\142\055\140\061\130\063\152\064\175\065\155" +
    "\066\144\067\170\001\002\000\056\011\uffc7\013\uffc7\014" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\025\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\034\uffc7\050\uffc7\053\uffc7\055" +
    "\uffc7\061\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\001\002\000\036\033\215\034\205\035\223\036\220\037" +
    "\210\040\216\041\213\042\212\043\221\044\214\045\207" +
    "\046\206\047\222\053\335\001\002\000\036\017\156\020" +
    "\145\022\163\025\150\031\160\034\136\050\141\055\140" +
    "\056\337\063\152\064\175\065\155\066\144\067\170\001" +
    "\002\000\036\033\215\034\205\035\223\036\220\037\210" +
    "\040\216\041\213\042\212\043\221\044\214\045\207\046" +
    "\206\047\222\056\341\001\002\000\054\013\135\014\147" +
    "\017\156\020\145\021\134\022\163\023\153\025\150\027" +
    "\167\030\162\031\160\034\136\050\141\053\142\055\140" +
    "\061\130\063\152\064\175\065\155\066\144\067\170\001" +
    "\002\000\056\011\uffc4\013\uffc4\014\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\025\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\034\uffc4\050\uffc4\053\uffc4\055\uffc4\061\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\001\002\000\054\013" +
    "\135\014\147\017\156\020\145\021\134\022\163\023\153" +
    "\025\150\027\167\030\162\031\160\034\136\050\141\053" +
    "\142\055\140\061\130\063\152\064\175\065\155\066\144" +
    "\067\170\001\002\000\056\011\uffc5\013\uffc5\014\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\034\uffc5\050\uffc5\053\uffc5\055\uffc5\061" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\001\002" +
    "\000\034\017\156\020\145\022\163\025\150\031\160\034" +
    "\136\050\141\055\140\063\152\064\175\065\155\066\144" +
    "\067\170\001\002\000\040\033\215\034\205\035\223\036" +
    "\220\037\210\040\216\041\213\042\212\043\221\044\214" +
    "\045\207\046\206\047\222\052\217\056\uffbe\001\002\000" +
    "\004\056\346\001\002\000\004\053\347\001\002\000\056" +
    "\011\uffc0\013\uffc0\014\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\034\uffc0" +
    "\050\uffc0\053\uffc0\055\uffc0\061\uffc0\063\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\001\002\000\056\013\uffd5\014\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\034\uffd5\050\uffd5\053\uffd5\055\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\001\002\000\004\002\000\001\002\000\004\055\353" +
    "\001\002\000\016\006\006\010\013\024\012\032\005\056" +
    "\uffee\064\014\001\002\000\004\056\355\001\002\000\004" +
    "\061\130\001\002\000\024\002\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\016\ufff0\024\ufff0\026\ufff0\032\ufff0\064\ufff0\001\002" +
    "\000\024\002\ufff9\006\ufff9\007\ufff9\010\ufff9\016\ufff9\024" +
    "\ufff9\026\ufff9\032\ufff9\064\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\022\002\010\003\016\004\003\005\006\006" +
    "\014\007\020\011\017\013\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\064\004\003\005\006\006\014\007\020" +
    "\011\017\013\021\032\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\033\005\006\006" +
    "\014\007\035\012\034\036\045\001\001\000\002\001\001" +
    "\000\004\034\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\033\005\006\006\014\007\035\012\034" +
    "\036\036\001\001\000\002\001\001\000\016\004\033\005" +
    "\006\006\014\007\035\012\034\036\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\033\005\006\006\014" +
    "\007\035\012\034\036\061\001\001\000\002\001\001\000" +
    "\004\034\053\001\001\000\002\001\001\000\016\004\033" +
    "\005\006\006\014\007\035\012\034\036\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\064\004\003\005\006\006\014\007\020" +
    "\011\017\013\021\032\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\072\014\073\037\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\072\014\073\037\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\102\006\103\010\104\001\001" +
    "\000\004\033\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\112\006\103\001\001\000\002\001\001\000" +
    "\004\033\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\102\006\103\010\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\102\006\103\010\124\001" +
    "\001\000\002\001\001\000\004\015\126\001\001\000\002" +
    "\001\001\000\044\004\131\005\006\006\103\015\145\016" +
    "\173\017\136\020\132\021\142\022\164\023\170\024\172" +
    "\025\171\026\153\027\130\031\160\040\156\041\165\001" +
    "\001\000\002\001\001\000\012\004\131\005\006\006\103" +
    "\040\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\317\026\153\027\130\031\160" +
    "\001\001\000\002\001\001\000\012\025\315\026\153\027" +
    "\130\031\160\001\001\000\012\025\314\026\153\027\130" +
    "\031\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\277\026\153\027\130\031\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\015\145\016\173\017\136\020\132\021\142\022\164" +
    "\023\170\024\172\025\171\026\153\027\130\031\160\041" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\015\145\016\173\017\136\020\132\021\142\022\164" +
    "\023\170\024\172\025\171\026\153\027\130\031\160\041" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\246\026\153\027\130\031\160\001\001\000\002\001" +
    "\001\000\014\025\201\026\153\027\130\030\202\031\160" +
    "\001\001\000\004\035\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\241\026\153\027\130\031\160" +
    "\001\001\000\012\025\240\026\153\027\130\031\160\001" +
    "\001\000\012\025\237\026\153\027\130\031\160\001\001" +
    "\000\012\025\236\026\153\027\130\031\160\001\001\000" +
    "\002\001\001\000\012\025\235\026\153\027\130\031\160" +
    "\001\001\000\012\025\234\026\153\027\130\031\160\001" +
    "\001\000\012\025\233\026\153\027\130\031\160\001\001" +
    "\000\012\025\232\026\153\027\130\031\160\001\001\000" +
    "\012\025\231\026\153\027\130\031\160\001\001\000\012" +
    "\025\227\026\153\027\130\031\160\001\001\000\012\025" +
    "\226\026\153\027\130\031\160\001\001\000\012\025\225" +
    "\026\153\027\130\031\160\001\001\000\012\025\224\026" +
    "\153\027\130\031\160\001\001\000\012\025\223\026\153" +
    "\027\130\031\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\201\026\153" +
    "\027\130\030\244\031\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\252\026\153\027\130\031\160\001" +
    "\001\000\002\001\001\000\032\015\145\016\254\017\136" +
    "\020\132\021\142\022\164\023\170\024\172\025\171\026" +
    "\153\027\130\031\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\274\026\153\027\130\031\160\001\001\000\002" +
    "\001\001\000\012\025\272\026\153\027\130\031\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\302\026\153\027\130\031\160" +
    "\001\001\000\002\001\001\000\032\015\145\016\304\017" +
    "\136\020\132\021\142\022\164\023\170\024\172\025\171" +
    "\026\153\027\130\031\160\001\001\000\002\001\001\000" +
    "\032\015\145\016\306\017\136\020\132\021\142\022\164" +
    "\023\170\024\172\025\171\026\153\027\130\031\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\322\026\153\027\130\031" +
    "\160\001\001\000\012\025\333\026\153\027\130\031\160" +
    "\001\001\000\002\001\001\000\012\025\324\026\153\027" +
    "\130\031\160\001\001\000\002\001\001\000\012\025\326" +
    "\026\153\027\130\031\160\001\001\000\002\001\001\000" +
    "\032\015\145\016\330\017\136\020\132\021\142\022\164" +
    "\023\170\024\172\025\171\026\153\027\130\031\160\001" +
    "\001\000\002\001\001\000\032\015\145\016\332\017\136" +
    "\020\132\021\142\022\164\023\170\024\172\025\171\026" +
    "\153\027\130\031\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\335\026\153\027\130\031\160\001" +
    "\001\000\002\001\001\000\032\015\145\016\337\017\136" +
    "\020\132\021\142\022\164\023\170\024\172\025\171\026" +
    "\153\027\130\031\160\001\001\000\002\001\001\000\032" +
    "\015\145\016\341\017\136\020\132\021\142\022\164\023" +
    "\170\024\172\025\171\026\153\027\130\031\160\001\001" +
    "\000\002\001\001\000\012\025\343\026\153\027\130\031" +
    "\160\001\001\000\004\035\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\102\006\103" +
    "\010\353\001\001\000\002\001\001\000\004\015\355\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ToyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ToyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ToyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // User Generated Code
	
	
    ToyLexer s;
	@SuppressWarnings("deprecation")
    public ToyParser(ToyLexer s){ this.s=s; }
	
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ToyParser$actions {


	// User Generated Code

	// output the reductions and their production numbers
	// this assumes the Object is an Integer and is used when RESULT
	// is being used to hold the production number.
	private String reduction(Object... reductions) {
		String str = "";
		for(Object i: reductions) {
			str += "[reduce " + i + "]";
		}
		
		return str;
	}

  private final ToyParser parser;

  /** Constructor */
  CUP$ToyParser$actions(ToyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ToyParser$do_action_part00000000(
    int                        CUP$ToyParser$act_num,
    java_cup.runtime.lr_parser CUP$ToyParser$parser,
    java.util.Stack            CUP$ToyParser$stack,
    int                        CUP$ToyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ToyParser$result;

      /* select the action based on the action number */
      switch (CUP$ToyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= decl declplus 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 101; System.out.print(reduction(d,d2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		RESULT = start_val;
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ToyParser$parser.done_parsing();
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declplus ::= decl declplus 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 201; System.out.print(reduction(d,d2)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("declplus",24, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declplus ::= 
            {
              Object RESULT =null;
		 RESULT = 202; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("declplus",24, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= variabledecl 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 301; System.out.print(reduction(v)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= functiondecl 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 302; System.out.print(reduction(f)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= classdecl 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 303;  System.out.print(reduction(c));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= interfacedecl 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 304; System.out.print(reduction(i)); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variabledecl ::= variable SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 401; System.out.print(reduction(v) + "\nSEMICOLON [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variabledecl",2, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 501; System.out.println("ID " + reduction(t)+ "[shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 601; System.out.println("INT " + "[shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = 602; System.out.println("DOUBLE [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = 603; System.out.println("BOOLEAN [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = 604; System.out.println("STRING [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= type LEFTBRACKET RIGHTBRACKET 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)).value;
		 RESULT = 605; System.out.println(reduction(t) + "LEFTBRACKET [shift]\n" + "RIGHTBRACKET [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= ID 
            {
              Object RESULT =null;
		 RESULT = 606; System.out.println("ID [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functiondecl ::= type ID LEFTPAREN formals RIGHTPAREN stmtblock 
            {
              Object RESULT =null;
		 RESULT = 701; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("functiondecl",5, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functiondecl ::= VOID ID LEFTPAREN formals RIGHTPAREN stmtblock 
            {
              Object RESULT =null;
		 RESULT = 702; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("functiondecl",5, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formals ::= variable variablecommplus 
            {
              Object RESULT =null;
		 RESULT = 801; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= 
            {
              Object RESULT =null;
		 RESULT = 802; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("formals",6, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variablecommplus ::= COMMA variable variablecommplus 
            {
              Object RESULT =null;
		 RESULT = 901; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variablecommplus",25, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variablecommplus ::= 
            {
              Object RESULT =null;
		 RESULT = 902; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variablecommplus",25, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classdecl ::= CLASS ID EXTENDS ID IMPLEMENTS ID idcommplus LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1001; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-9)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classdecl ::= CLASS ID EXTENDS ID IMPLEMENTS ID idcommplus LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1002; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-8)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classdecl ::= CLASS ID EXTENDS ID LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1003; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classdecl ::= CLASS ID EXTENDS ID LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1004; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classdecl ::= CLASS ID IMPLEMENTS ID idcommplus LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1005; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-7)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // classdecl ::= CLASS ID IMPLEMENTS ID idcommplus LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1006; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classdecl ::= CLASS ID LEFTBRACE fieldstar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1007; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classdecl ::= CLASS ID LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1008; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("classdecl",7, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fieldstar ::= field fieldstar 
            {
              Object RESULT =null;
		 RESULT = 1101; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("fieldstar",28, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // idcommplus ::= COMMA ID idcommplus 
            {
              Object RESULT =null;
		 RESULT = 1201; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("idcommplus",26, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // idcommplus ::= 
            {
              Object RESULT =null;
		 RESULT = 1202; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("idcommplus",26, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field ::= variabledecl 
            {
              Object RESULT =null;
		 RESULT = 1301; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("field",8, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field ::= functiondecl 
            {
              Object RESULT =null;
		 RESULT = 1302; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("field",8, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // interfacedecl ::= INTERFACE ID LEFTBRACE prototypestar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1401; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("interfacedecl",9, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // interfacedecl ::= INTERFACE ID LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1402; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("interfacedecl",9, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // prototypestar ::= prototype prototypestar 
            {
              Object RESULT =null;
		 RESULT = 1501; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("prototypestar",29, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // prototype ::= type ID LEFTPAREN formals RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 1601; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("prototype",10, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // prototype ::= VOID ID LEFTPAREN formals RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 1602; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("prototype",10, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmtblock ::= LEFTBRACE variabledeclstar stmtstar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1701; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmtblock ::= LEFTBRACE stmtstar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1702; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmtblock ::= LEFTBRACE variabledeclstar RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1703; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmtblock ::= LEFTBRACE RIGHTBRACE 
            {
              Object RESULT =null;
		 RESULT = 1704; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtblock",11, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variabledeclstar ::= variabledecl variabledeclstar 
            {
              Object RESULT =null;
		 RESULT = 1801; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("variabledeclstar",30, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmtstar ::= stmt stmtstar 
            {
              Object RESULT =null;
		 RESULT = 1901; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmtstar",31, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= expr SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2001; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2002; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= ifstmt 
            {
              Object RESULT =null;
		 RESULT = 2003; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= whilestmt 
            {
              Object RESULT =null;
		 RESULT = 2004; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= forstmt 
            {
              Object RESULT =null;
		 RESULT = 2005; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= breakstmt 
            {
              Object RESULT =null;
		 RESULT = 2006; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= returnstmt 
            {
              Object RESULT =null;
		 RESULT = 2007; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= printstmt 
            {
              Object RESULT =null;
		 RESULT = 2008; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= stmtblock 
            {
              Object RESULT =null;
		 RESULT = 2009; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("stmt",12, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ifstmt ::= IF LEFTPAREN expr RIGHTPAREN stmt ELSE stmt 
            {
              Object RESULT =null;
		 RESULT = 2101; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("ifstmt",13, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ifstmt ::= IF LEFTPAREN expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		 RESULT = 2102; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("ifstmt",13, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // whilestmt ::= WHILE LEFTPAREN expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		 RESULT = 2201; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("whilestmt",14, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-4)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // forstmt ::= FOR LEFTPAREN expr SEMICOLON expr SEMICOLON expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		 RESULT = 2301; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-8)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // forstmt ::= FOR LEFTPAREN expr SEMICOLON expr SEMICOLON RIGHTPAREN stmt 
            {
              Object RESULT =null;
		 RESULT = 2302; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-7)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forstmt ::= FOR LEFTPAREN SEMICOLON expr SEMICOLON expr RIGHTPAREN stmt 
            {
              Object RESULT =null;
		 RESULT = 2303; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-7)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // forstmt ::= FOR LEFTPAREN SEMICOLON expr SEMICOLON RIGHTPAREN stmt 
            {
              Object RESULT =null;
		 RESULT = 2304; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("forstmt",15, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-6)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // breakstmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2401; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("breakstmt",16, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // returnstmt ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2501; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("returnstmt",17, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // returnstmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2502; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("returnstmt",17, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // printstmt ::= PRINTLN LEFTPAREN expr exprcommplus RIGHTPAREN SEMICOLON 
            {
              Object RESULT =null;
		 RESULT = 2601; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("printstmt",18, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprcommplus ::= COMMA expr exprcommplus 
            {
              Object RESULT =null;
		 RESULT = 2701; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("exprcommplus",27, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprcommplus ::= 
            {
              Object RESULT =null;
		 RESULT = 2702; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("exprcommplus",27, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= lvalue ASSIGNOP expr 
            {
              Object RESULT =null;
		 RESULT = 2801; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= constant 
            {
              Object RESULT =null;
		 RESULT = 2802; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= lvalue 
            {
              Object RESULT =null;
		 RESULT = 2803; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= THIS 
            {
              Object RESULT =null;
		 RESULT = 2804; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= call 
            {
              Object RESULT =null;
		 RESULT = 2805; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= LEFTPAREN expr RIGHTPAREN 
            {
              Object RESULT =null;
		 RESULT = 2806; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		 RESULT = 2807; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		 RESULT = 2808; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr MULTIPLICATION expr 
            {
              Object RESULT =null;
		 RESULT = 2809; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		 RESULT = 2810; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr MOD expr 
            {
              Object RESULT =null;
		 RESULT = 2811; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= MINUS expr 
            {
              Object RESULT =null;
		 RESULT = 2812; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr LESS expr 
            {
              Object RESULT =null;
		 RESULT = 2813; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr LESSEQUAL expr 
            {
              Object RESULT =null;
		 RESULT = 2814; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr GREATER expr 
            {
              Object RESULT =null;
		 RESULT = 2815; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr GREATEREQUAL expr 
            {
              Object RESULT =null;
		 RESULT = 2816; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr EQUAL expr 
            {
              Object RESULT =null;
		 RESULT = 2817; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr NOTEQUAL expr 
            {
              Object RESULT =null;
		 RESULT = 2818; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr AND expr 
            {
              Object RESULT =null;
		 RESULT = 2819; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr OR expr 
            {
              Object RESULT =null;
		 RESULT = 2820; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= NOT expr 
            {
              Object RESULT =null;
		 RESULT = 2821; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= READLN LEFTPAREN RIGHTPAREN 
            {
              Object RESULT =null;
		 RESULT = 2822; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= NEW LEFTPAREN ID RIGHTPAREN 
            {
              Object RESULT =null;
		 RESULT = 2823; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= NEWARRAY LEFTPAREN INTCONSTANT COMMA type RIGHTPAREN 
            {
              Object RESULT =null;
		 RESULT = 2824; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("expr",19, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lvalue ::= ID LEFTBRACKET expr RIGHTBRACKET 
            {
              Object RESULT =null;
		 RESULT = 2901; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvalue",20, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lvalue ::= ID PERIOD ID 
            {
              Object RESULT =null;
		 RESULT = 2902; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvalue",20, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lvalue ::= lvalue LEFTBRACKET expr RIGHTBRACKET 
            {
              Object RESULT =null;
		 RESULT = 2903; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvalue",20, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lvalue ::= lvalue PERIOD ID 
            {
              Object RESULT =null;
		 RESULT = 2904; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("lvalue",20, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-2)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // call ::= ID LEFTPAREN actuals RIGHTPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 3001; System.out.print("ID [shift]\nLEFTPAREN [shift]" + reduction(a) + "RIGHTPARENT [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-3)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // call ::= ID PERIOD ID LEFTPAREN actuals RIGHTPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		 RESULT = 3002; System.out.print("ID [shift]\nPERIOD [shift]\nID [shift]\nLEFTPAREN [shift]\n" + reduction(a) + "RIGHTPAREN [shift]\n"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("call",21, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-5)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // actuals ::= expr exprcommplus 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ToyParser$stack.peek()).value;
		 RESULT = 3101; System.out.print(reduction(e1,e2));
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("actuals",22, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.elementAt(CUP$ToyParser$top-1)), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // actuals ::= 
            {
              Object RESULT =null;
		 RESULT = 3102; 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("actuals",22, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // constant ::= INTCONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3201; System.out.println("INTCONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // constant ::= DOUBLECONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3202; System.out.println("DOUBLECONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // constant ::= STRINGCONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3203; System.out.println("STRINGCONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constant ::= BOOLEANCONSTANT 
            {
              Object RESULT =null;
		 RESULT = 3204; System.out.println("BOOLEANCONSTANT [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // constant ::= NULL 
            {
              Object RESULT =null;
		 RESULT = 3205; System.out.println("NULL [shift]"); 
              CUP$ToyParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ToyParser$stack.peek()), RESULT);
            }
          return CUP$ToyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ToyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ToyParser$do_action(
    int                        CUP$ToyParser$act_num,
    java_cup.runtime.lr_parser CUP$ToyParser$parser,
    java.util.Stack            CUP$ToyParser$stack,
    int                        CUP$ToyParser$top)
    throws java.lang.Exception
    {
              return CUP$ToyParser$do_action_part00000000(
                               CUP$ToyParser$act_num,
                               CUP$ToyParser$parser,
                               CUP$ToyParser$stack,
                               CUP$ToyParser$top);
    }
}

}
