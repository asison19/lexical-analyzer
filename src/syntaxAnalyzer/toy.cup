/* Simple Toy language; parser evaluates constant expressions on the fly*/

// requires java-cup-11b-runtime.jar
package syntaxAnalyzer;

import java_cup.runtime.*;
import lexicalAnalyzer.*; // Project 1

class ToyParser;

parser code {:
    // Connect this parser to a scanner!
    ToyLexer s;
	@SuppressWarnings("deprecation")
    public ToyParser(ToyLexer s){ this.s=s; }
:}

/* define how to connect to the scanner! */
// init with {: s.init(); :};

// scan with {: return s.yylex(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal        TRUE, FALSE, BOOLEAN, CLASS, DOUBLE, ELSE, EXTENDS, FOR, IF; // TODO ERROR IS POSSIBLY HERE?
terminal	    IMPLEMENTS, INTERFACE, NEW, NEWARRAY, PRINTLN, READLN, RETURN;
terminal	    STRING, THIS, VOID, WHILE, BREAK, NULL, INT, PLUS, MINUS, MULTIPLICATION;
terminal	    DIVISION, MOD, LESS, GREATER, LESSEQUAL, GREATEREQUAL, EQUAL, NOTEQUAL, AND, OR;
terminal	    NOT, ASSIGNOP, COMMA, SEMICOLON, PERIOD, LEFTPAREN, RIGHTPAREN, LEFTBRACKET, RIGHTBRACKET;// TODO the rest above need to be uppercased
terminal	    LEFTBRACE, RIGHTBRACE, INTCONSTANT, ID, STRINGCONSTANT, DOUBLECONSTANT, BOOLEANCONSTANT; // these have been uppercased in the grammar rules section

/* Non terminals */
non terminal        program, decl, variabledecl, variable, type, functiondecl, formals, classdecl;
non terminal		field, interfacedecl, prototype, stmtblock, stmt, ifstmt, whilestmt, forstmt;
non terminal		breakstmt, returnstmt, printstmt, expr, lvalue, call, actuals, constant;
non terminal	 	declplus, variablecommplus, idcommplus, exprcommplus, fieldstar, prototypestar, variabledeclstar, stmtstar; // ALL OF THE NON TERMINALS TO FIX ISSUES

/* Precedences */
precedence left ASSIGNOP;
precedence left OR;
precedence left AND;
precedence left EQUAL, NOTEQUAL;
precedence left LESS, LESSEQUAL, GREATER, GREATEREQUAL;
precedence left PLUS, MINUS;
precedence left MULTIPLICATION, DIVISION, MOD;
precedence left NOT;
precedence left LEFTBRACKET, PERIOD;
precedence left ELSE; // FIXES SR DANGLING ELSE PROBLEM

/****************************** The grammar rules ******************************/
//Production # 0101 // TODO name production rules?, print out shift and reduce when shifting and reducing // CUP$ToyParser$act_num this counts as grammar rule?
program 		::= decl:d declplus:d2 	{: System.out.print("[reduce " + d + "]" + "[reduce " + d2 + "]"); RESULT = 0; :}
;

//Production # 0201 0202
declplus 		::= decl:d declplus:d2 	{: System.out.print("[reduce " + d + "] " + "[reduce " + d2 + "]"); RESULT = 1; :}// FIXES '+' PROBLEM
				|						{: RESULT = 2; :} 
;

decl 			::= variabledecl:v 		{: System.out.print("[reduce " + v + "]" ); RESULT = 3; :}
				| functiondecl
				| classdecl
				| interfacedecl
;

variabledecl 	::= variable:v SEMICOLON {: System.out.print("[reduce " + v + "]" + "\nSEMICOLON [shift]\n"); RESULT = 4; :}
;

variable 		::= type:t ID 			{: System.out.println("ID " + "[reduce " + t + "] " + "[shift]"); RESULT = 5; :}
;

type 			::= INT:n 							{: System.out.println("INT [shift]"); RESULT = 6; :}
				| DOUBLE 							{: System.out.println("DOUBLE [shift]"); :}
				| BOOLEAN 							{: System.out.println("BOOLEAN [shift]"); :}
				| STRING 							{: System.out.println("STRING [shift]"); :}
				| type LEFTBRACKET RIGHTBRACKET 	{: System.out.println("LEFTBRACKET [shift]\n" + "RIGHTBRACKET [shift]\n"); :}
				| ID 								{: System.out.println("ID [shift]"); :}
;

functiondecl 	::= type ID LEFTPAREN formals RIGHTPAREN stmtblock
				| VOID ID LEFTPAREN formals RIGHTPAREN stmtblock
;

formals 		::= variable variablecommplus
				|
;

variablecommplus 	::= COMMA variable variablecommplus // FIXES '+,' PROBLEM
					|
;

classdecl 		::= CLASS ID EXTENDS ID IMPLEMENTS ID idcommplus LEFTBRACE fieldstar RIGHTBRACE // FIXES '<>' PROBLEM
				| CLASS ID EXTENDS ID IMPLEMENTS ID idcommplus LEFTBRACE RIGHTBRACE
				| CLASS ID EXTENDS ID LEFTBRACE fieldstar RIGHTBRACE
				| CLASS ID EXTENDS ID LEFTBRACE RIGHTBRACE
				| CLASS ID IMPLEMENTS ID idcommplus LEFTBRACE fieldstar RIGHTBRACE
				| CLASS ID IMPLEMENTS ID idcommplus LEFTBRACE RIGHTBRACE
				| CLASS ID LEFTBRACE fieldstar RIGHTBRACE
				| CLASS ID LEFTBRACE RIGHTBRACE
;

fieldstar ::= field fieldstar // FIXES '*' PROBLEM
;

idcommplus ::= COMMA ID idcommplus // FIXES '+,' PROBLEM
	      |
;

field ::= variabledecl
	| functiondecl
;

interfacedecl ::= INTERFACE ID LEFTBRACE prototypestar RIGHTBRACE
		  | INTERFACE ID LEFTBRACE RIGHTBRACE
;

prototypestar ::= prototype prototypestar // FIXED '*' PROBLEM
;

prototype ::= type ID LEFTPAREN formals RIGHTPAREN SEMICOLON
	     | VOID ID LEFTPAREN formals RIGHTPAREN SEMICOLON
;

stmtblock ::= LEFTBRACE variabledeclstar stmtstar RIGHTBRACE
	     | LEFTBRACE stmtstar RIGHTBRACE
	     | LEFTBRACE variabledeclstar RIGHTBRACE
	     | LEFTBRACE RIGHTBRACE
;

variabledeclstar ::= variabledecl variabledeclstar // FIXED '*' PROBLEM
;

stmtstar ::= stmt stmtstar // FIXED '*' PROBLEM
;

stmt ::= expr SEMICOLON // FIXES '<>' PROBLEM
	| SEMICOLON
	| ifstmt
	| whilestmt
	| forstmt
	| breakstmt
	| returnstmt
	| printstmt
	| stmtblock
;

ifstmt ::= IF LEFTPAREN expr RIGHTPAREN stmt ELSE stmt // FIXES '<>' PROBLEM
	  | IF LEFTPAREN expr RIGHTPAREN stmt
;

whilestmt ::= WHILE LEFTPAREN expr RIGHTPAREN stmt
;

forstmt ::= FOR LEFTPAREN expr SEMICOLON expr SEMICOLON expr RIGHTPAREN stmt // FIXES '<>' PROBLEM
	   | FOR LEFTPAREN expr SEMICOLON expr SEMICOLON RIGHTPAREN stmt
	   | FOR LEFTPAREN SEMICOLON expr SEMICOLON expr RIGHTPAREN stmt
	   | FOR LEFTPAREN SEMICOLON expr SEMICOLON RIGHTPAREN stmt
;

breakstmt ::= BREAK SEMICOLON
;

returnstmt ::= RETURN expr SEMICOLON // FIXES '<>' PROBLEM
	     | RETURN SEMICOLON
;

printstmt ::= PRINTLN LEFTPAREN expr exprcommplus RIGHTPAREN SEMICOLON
;

exprcommplus ::= COMMA expr exprcommplus // FIXES '+,' PROBLEM
	       |
;

expr ::= lvalue ASSIGNOP expr
	| constant
	| lvalue
	| THIS
	| call
	| LEFTPAREN expr RIGHTPAREN
	| expr PLUS expr
	| expr MINUS expr
	| expr MULTIPLICATION expr
	| expr DIVISION expr
	| expr MOD expr
	| MINUS expr
	| expr LESS expr
	| expr LESSEQUAL expr
	| expr GREATER expr
	| expr GREATEREQUAL expr
	| expr EQUAL expr
	| expr NOTEQUAL expr
	| expr AND expr
	| expr OR expr
	| NOT expr
	| READLN LEFTPAREN RIGHTPAREN
	| NEW LEFTPAREN ID RIGHTPAREN
	| NEWARRAY LEFTPAREN INTCONSTANT COMMA type RIGHTPAREN
;

lvalue ::= ID LEFTBRACKET expr RIGHTBRACKET // FIXED SR AND RR ISSUES HERE
	  | ID PERIOD ID
	  | lvalue LEFTBRACKET expr RIGHTBRACKET
	  | lvalue PERIOD ID
;

call ::= ID LEFTPAREN actuals RIGHTPAREN
	| ID PERIOD ID LEFTPAREN actuals RIGHTPAREN
;

actuals ::= expr exprcommplus
	   |
;

constant ::= INTCONSTANT
	    | DOUBLECONSTANT
	    | STRINGCONSTANT
	    | BOOLEANCONSTANT
	    | NULL
;
