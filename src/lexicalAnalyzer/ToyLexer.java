/* The following code was generated by JFlex 1.7.0 */

/* 
Jflex specification file used to create the .java file was created by:
Andrew Sison, and Zach Martin.
*/
// User Code
package lexicalAnalyzer;
import syntaxAnalyzer.*;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.net.URISyntaxException;
import java.io.File;
import java.util.Scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>D:/eclipse/java-oxygen/eclipse-workspace/lexical-analyzer/src/lexicalAnalyzer/toy.jflex</tt>
 */
public class ToyLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\10\1\12\1\11\1\11\22\0\1\22\1\63\1\6"+
    "\2\0\1\57\1\64\1\0\1\70\1\71\1\21\1\56\1\66\1\3"+
    "\1\4\1\20\1\23\11\2\1\0\1\67\1\60\1\62\1\61\2\0"+
    "\4\25\1\5\1\25\14\1\1\51\4\1\1\24\2\1\1\72\1\7"+
    "\1\73\1\0\1\17\1\0\1\33\1\36\1\41\1\42\1\31\1\32"+
    "\1\52\1\53\1\44\1\1\1\55\1\34\1\45\1\40\1\37\1\46"+
    "\1\1\1\27\1\35\1\26\1\30\1\54\1\47\1\43\1\50\1\1"+
    "\1\74\1\65\1\75\7\0\1\12\134\0\1\13\160\0\1\15\u1ed4\0"+
    "\1\12\1\12\202\0\1\14\udf50\0\1\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\22\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\0\1\7\1\10\1\2\15\1\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\2\0\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\2\0\1\6"+
    "\2\0\15\1\1\31\6\1\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\4\0\1\2\7\1\1\40\3\1\1\41"+
    "\2\1\1\42\5\1\1\27\3\0\1\43\1\44\2\1"+
    "\1\45\4\1\1\46\10\1\1\47\2\0\3\1\1\50"+
    "\1\51\2\1\1\52\4\1\1\53\1\1\1\54\1\55"+
    "\3\1\1\56\3\1\1\57\1\60\1\61\3\1\1\62"+
    "\1\63\2\1\1\64\1\1\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\370\0\370"+
    "\0\u0174\0\u01b2\0\370\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\272\0\370\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c"+
    "\0\u068a\0\370\0\370\0\370\0\370\0\370\0\370\0\370"+
    "\0\370\0\u06c8\0\370\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\76\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\370\0\370\0\370\0\370"+
    "\0\370\0\370\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u07fe\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\76\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u1268\0\u12a6\0\u12e4\0\76"+
    "\0\76\0\u1322\0\u1360\0\76\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\76\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\76\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\76"+
    "\0\76\0\u17bc\0\u17fa\0\76\0\u1838\0\u1876\0\u18b4\0\u18f2"+
    "\0\76\0\u1930\0\76\0\76\0\u196e\0\u19ac\0\u19ea\0\76"+
    "\0\u1a28\0\u1a66\0\u1aa4\0\76\0\76\0\76\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\76\0\76\0\u1b9c\0\u1bda\0\76\0\u1c18\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\2\1\6\1\0"+
    "\1\7\1\10\1\0\1\11\4\0\1\12\1\13\1\10"+
    "\1\14\2\2\1\15\1\16\1\2\1\17\1\20\3\2"+
    "\1\21\1\2\1\22\1\23\1\24\1\2\1\25\1\2"+
    "\1\26\1\27\1\2\1\30\2\2\1\31\1\2\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\33\2\22\0"+
    "\1\3\1\0\1\52\16\0\1\3\54\0\1\3\20\0"+
    "\1\14\150\0\6\6\1\53\1\54\66\6\14\0\1\55"+
    "\101\0\1\56\1\57\56\0\1\3\1\0\1\52\16\0"+
    "\1\3\1\60\16\0\1\60\33\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\4\2\1\61\23\2\1\62\2\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\6\2"+
    "\1\63\24\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\11\2\1\64\6\2\1\65\12\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\10\2\1\66\3\2"+
    "\1\67\16\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\4\2\1\70\7\2\1\71\16\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\5\2\1\72\1\73"+
    "\24\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\11\2\1\74\21\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\14\2\1\75\16\2\21\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\7\2\1\76\5\2\1\77"+
    "\4\2\1\100\10\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\4\2\1\101\26\2\21\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\30\2\1\102\2\2\21\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\3\2\1\103"+
    "\27\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\14\2\1\104\16\2\102\0\1\105\75\0\1\106\75\0"+
    "\1\107\75\0\1\110\77\0\1\111\76\0\1\112\12\0"+
    "\1\52\2\0\1\113\15\0\1\52\5\0\1\113\53\0"+
    "\1\114\103\0\1\115\60\0\10\56\3\0\63\56\21\57"+
    "\1\116\54\57\2\0\1\117\2\0\1\117\15\0\1\117"+
    "\1\0\1\117\3\0\3\117\2\0\1\117\2\0\2\117"+
    "\34\0\2\2\2\0\1\2\11\0\1\2\3\0\5\2"+
    "\1\120\25\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\21\2\1\121\11\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\3\2\1\122\4\2\1\123\22\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\12\2"+
    "\1\124\20\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\3\2\1\125\27\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\11\2\1\126\21\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\4\2\1\127\26\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\6\2"+
    "\1\130\24\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\14\2\1\131\16\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\11\2\1\132\21\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\24\2\1\133\6\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\10\2"+
    "\1\134\22\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\5\2\1\135\25\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\3\2\1\136\27\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\23\2\1\137\7\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\21\2"+
    "\1\140\11\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\21\2\1\141\11\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\4\2\1\142\26\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\21\2\1\143\11\2"+
    "\22\0\1\144\1\145\17\0\1\144\32\0\1\145\17\0"+
    "\10\6\3\0\63\6\7\115\1\146\3\115\1\147\1\0"+
    "\1\115\1\0\57\115\20\57\1\10\1\116\54\57\1\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\6\2\1\150"+
    "\24\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\12\2\1\151\20\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\5\2\1\152\25\2\21\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\17\2\1\153\13\2\21\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\6\2\1\154"+
    "\24\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\6\2\1\155\24\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\12\2\1\156\20\2\21\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\10\2\1\157\22\2\21\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\11\2\1\160"+
    "\21\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\11\2\1\161\21\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\10\2\1\162\22\2\21\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\12\2\1\163\20\2\21\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\13\2\1\164"+
    "\17\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\6\2\1\165\24\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\11\2\1\166\21\2\21\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\15\2\1\167\15\2\21\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\11\2\1\170"+
    "\21\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\21\2\1\171\11\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\17\2\1\172\13\2\22\0\1\144\20\0"+
    "\1\144\61\0\1\173\102\0\1\174\62\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\4\2\1\175\26\2\21\0"+
    "\2\2\2\0\1\2\11\0\1\2\3\0\11\2\1\176"+
    "\21\2\21\0\2\2\2\0\1\2\11\0\1\2\3\0"+
    "\15\2\1\177\15\2\21\0\2\2\2\0\1\2\11\0"+
    "\1\2\3\0\6\2\1\200\24\2\21\0\2\2\2\0"+
    "\1\2\11\0\1\2\3\0\32\2\1\201\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\6\2\1\202\24\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\4\2"+
    "\1\203\26\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\12\2\1\204\20\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\11\2\1\205\21\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\4\2\1\206\26\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\6\2"+
    "\1\207\24\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\3\2\1\210\27\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\6\2\1\211\24\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\15\2\1\212\15\2"+
    "\20\0\10\115\3\0\63\115\16\0\1\53\60\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\15\2\1\213\15\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\15\2"+
    "\1\214\15\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\17\2\1\215\13\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\10\2\1\216\22\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\4\2\1\217\26\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\6\2"+
    "\1\220\24\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\7\2\1\221\23\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\22\2\1\222\10\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\11\2\1\223\21\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\27\2"+
    "\1\224\3\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\12\2\1\225\20\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\15\2\1\226\15\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\10\2\1\227\22\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\10\2"+
    "\1\230\22\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\6\2\1\231\24\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\15\2\1\232\15\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\25\2\1\233\5\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\16\2"+
    "\1\234\14\2\21\0\2\2\2\0\1\2\11\0\1\2"+
    "\3\0\15\2\1\235\15\2\21\0\2\2\2\0\1\2"+
    "\11\0\1\2\3\0\6\2\1\236\24\2\21\0\2\2"+
    "\2\0\1\2\11\0\1\2\3\0\3\2\1\237\27\2"+
    "\21\0\2\2\2\0\1\2\11\0\1\2\3\0\12\2"+
    "\1\240\20\2\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7254];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\1\0\2\11\1\0\1\1\1\11"+
    "\17\1\1\11\4\1\2\0\10\11\1\1\1\11\2\0"+
    "\1\1\2\0\24\1\6\11\4\0\26\1\3\0\23\1"+
    "\2\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
int t_flag = 0;
int yylval;
// trie table that contains the identifiers and keywords
TrieTable trie = new TrieTable();

public void outputTrie() {
	trie.output();
}

// end of user code


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ToyLexer(java.io.Reader in) {
  // User added code.
// Add keyword identifiers to the trie table.
File root = new File("");
try {
	root = new File(Thread.currentThread().getContextClassLoader().getResource("").toURI());
} catch (URISyntaxException e1) {
	e1.printStackTrace();
}
File infile = new File(root ,"../src/lexicalAnalyzer/keywords.txt");
Scanner s;

try {
	s = new Scanner(new FileReader(infile));
	while (s.hasNext()) {
		trie.insert(s.next());
	}
} catch (FileNotFoundException e) {
	e.printStackTrace();
}
// end user added code.
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { trie.insert(yytext()); return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.ID);
            } 
            // fall through
          case 54: break;
          case 2: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.INTCONSTANT);
            } 
            // fall through
          case 55: break;
          case 3: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.MINUS);
            } 
            // fall through
          case 56: break;
          case 4: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.PERIOD);
            } 
            // fall through
          case 57: break;
          case 5: 
            { System.out.print("\n");
            } 
            // fall through
          case 58: break;
          case 6: 
            { 
            } 
            // fall through
          case 59: break;
          case 7: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.DIVISION);
            } 
            // fall through
          case 60: break;
          case 8: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.MULTIPLICATION);
            } 
            // fall through
          case 61: break;
          case 9: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.PLUS);
            } 
            // fall through
          case 62: break;
          case 10: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.MOD);
            } 
            // fall through
          case 63: break;
          case 11: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.LESS);
            } 
            // fall through
          case 64: break;
          case 12: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.GREATER);
            } 
            // fall through
          case 65: break;
          case 13: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.ASSIGNOP);
            } 
            // fall through
          case 66: break;
          case 14: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.NOT);
            } 
            // fall through
          case 67: break;
          case 15: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.COMMA);
            } 
            // fall through
          case 68: break;
          case 16: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.SEMICOLON);
            } 
            // fall through
          case 69: break;
          case 17: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.LEFTPAREN);
            } 
            // fall through
          case 70: break;
          case 18: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.RIGHTPAREN);
            } 
            // fall through
          case 71: break;
          case 19: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.LEFTBRACKET);
            } 
            // fall through
          case 72: break;
          case 20: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.RIGHTBRACKET);
            } 
            // fall through
          case 73: break;
          case 21: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.LEFTBRACE);
            } 
            // fall through
          case 74: break;
          case 22: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.RIGHTBRACE);
            } 
            // fall through
          case 75: break;
          case 23: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.DOUBLECONSTANT);
            } 
            // fall through
          case 76: break;
          case 24: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.STRINGCONSTANT);
            } 
            // fall through
          case 77: break;
          case 25: 
            { t_flag = ToyParserSym.IF; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.IF);
            } 
            // fall through
          case 78: break;
          case 26: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.LESSEQUAL);
            } 
            // fall through
          case 79: break;
          case 27: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.GREATEREQUAL);
            } 
            // fall through
          case 80: break;
          case 28: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.EQUAL);
            } 
            // fall through
          case 81: break;
          case 29: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.NOTEQUAL);
            } 
            // fall through
          case 82: break;
          case 30: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.AND);
            } 
            // fall through
          case 83: break;
          case 31: 
            { return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.OR);
            } 
            // fall through
          case 84: break;
          case 32: 
            { t_flag = ToyParserSym.FOR; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.FOR);
            } 
            // fall through
          case 85: break;
          case 33: 
            { t_flag = ToyParserSym.NEW; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.NEW);
            } 
            // fall through
          case 86: break;
          case 34: 
            { t_flag = ToyParserSym.INT; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.INT);
            } 
            // fall through
          case 87: break;
          case 35: 
            { t_flag = ToyParserSym.BOOLEANCONSTANT;return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.ID);
            } 
            // fall through
          case 88: break;
          case 36: 
            { t_flag = ToyParserSym.THIS; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.THIS);
            } 
            // fall through
          case 89: break;
          case 37: 
            { t_flag = ToyParserSym.ELSE; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.ELSE);
            } 
            // fall through
          case 90: break;
          case 38: 
            { t_flag = ToyParserSym.NULL; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.NULL);
            } 
            // fall through
          case 91: break;
          case 39: 
            { t_flag = ToyParserSym.VOID; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.VOID);
            } 
            // fall through
          case 92: break;
          case 40: 
            { t_flag = ToyParserSym.BOOLEANCONSTANT; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.BOOLEANCONSTANT);
            } 
            // fall through
          case 93: break;
          case 41: 
            { t_flag = ToyParserSym.BREAK; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.BREAK);
            } 
            // fall through
          case 94: break;
          case 42: 
            { t_flag = ToyParserSym.CLASS; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.CLASS);
            } 
            // fall through
          case 95: break;
          case 43: 
            { t_flag = ToyParserSym.WHILE; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.WHILE);
            } 
            // fall through
          case 96: break;
          case 44: 
            { t_flag = ToyParserSym.RETURN; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.RETURN);
            } 
            // fall through
          case 97: break;
          case 45: 
            { t_flag = ToyParserSym.READLN; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.READLN);
            } 
            // fall through
          case 98: break;
          case 46: 
            { t_flag = ToyParserSym.DOUBLE; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.DOUBLE);
            } 
            // fall through
          case 99: break;
          case 47: 
            { t_flag = ToyParserSym.STRING; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.STRING);
            } 
            // fall through
          case 100: break;
          case 48: 
            { t_flag = ToyParserSym.EXTENDS; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.EXTENDS);
            } 
            // fall through
          case 101: break;
          case 49: 
            { t_flag = ToyParserSym.BOOLEAN;  return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.BOOLEAN);
            } 
            // fall through
          case 102: break;
          case 50: 
            { t_flag = ToyParserSym.PRINTLN; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.PRINTLN);
            } 
            // fall through
          case 103: break;
          case 51: 
            { t_flag = ToyParserSym.NEWARRAY; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.NEWARRAY);
            } 
            // fall through
          case 104: break;
          case 52: 
            { t_flag = ToyParserSym.INTERFACE; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.INTERFACE);
            } 
            // fall through
          case 105: break;
          case 53: 
            { t_flag = ToyParserSym.IMPLEMENTS; return new java_cup.runtime.Symbol(syntaxAnalyzer.ToyParserSym.IMPLEMENTS);
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
